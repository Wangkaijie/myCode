/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.fare.galileo.shopping.route;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GalileoShoppingProcess implements org.apache.thrift.TBase<GalileoShoppingProcess, GalileoShoppingProcess._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GalileoShoppingProcess");

  private static final org.apache.thrift.protocol.TField FROM_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromCity", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_AIRPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("fromAirport", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TO_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("toCity", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TO_AIRPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("toAirport", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TO_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GALILEO_SHOPPING_FLIGHT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("galileoShoppingFlightList", org.apache.thrift.protocol.TType.LIST, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GalileoShoppingProcessStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GalileoShoppingProcessTupleSchemeFactory());
  }

  public String fromCity; // optional
  public String fromAirport; // optional
  public String fromDate; // optional
  public String fromTime; // optional
  public String toCity; // optional
  public String toAirport; // optional
  public String toDate; // optional
  public String toTime; // optional
  public List<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight> galileoShoppingFlightList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_CITY((short)1, "fromCity"),
    FROM_AIRPORT((short)2, "fromAirport"),
    FROM_DATE((short)3, "fromDate"),
    FROM_TIME((short)4, "fromTime"),
    TO_CITY((short)5, "toCity"),
    TO_AIRPORT((short)6, "toAirport"),
    TO_DATE((short)7, "toDate"),
    TO_TIME((short)8, "toTime"),
    GALILEO_SHOPPING_FLIGHT_LIST((short)15, "galileoShoppingFlightList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_CITY
          return FROM_CITY;
        case 2: // FROM_AIRPORT
          return FROM_AIRPORT;
        case 3: // FROM_DATE
          return FROM_DATE;
        case 4: // FROM_TIME
          return FROM_TIME;
        case 5: // TO_CITY
          return TO_CITY;
        case 6: // TO_AIRPORT
          return TO_AIRPORT;
        case 7: // TO_DATE
          return TO_DATE;
        case 8: // TO_TIME
          return TO_TIME;
        case 15: // GALILEO_SHOPPING_FLIGHT_LIST
          return GALILEO_SHOPPING_FLIGHT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FROM_CITY,_Fields.FROM_AIRPORT,_Fields.FROM_DATE,_Fields.FROM_TIME,_Fields.TO_CITY,_Fields.TO_AIRPORT,_Fields.TO_DATE,_Fields.TO_TIME,_Fields.GALILEO_SHOPPING_FLIGHT_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_CITY, new org.apache.thrift.meta_data.FieldMetaData("fromCity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_AIRPORT, new org.apache.thrift.meta_data.FieldMetaData("fromAirport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_TIME, new org.apache.thrift.meta_data.FieldMetaData("fromTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_CITY, new org.apache.thrift.meta_data.FieldMetaData("toCity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_AIRPORT, new org.apache.thrift.meta_data.FieldMetaData("toAirport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_TIME, new org.apache.thrift.meta_data.FieldMetaData("toTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GALILEO_SHOPPING_FLIGHT_LIST, new org.apache.thrift.meta_data.FieldMetaData("galileoShoppingFlightList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GalileoShoppingProcess.class, metaDataMap);
  }

  public GalileoShoppingProcess() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GalileoShoppingProcess(GalileoShoppingProcess other) {
    if (other.isSetFromCity()) {
      this.fromCity = other.fromCity;
    }
    if (other.isSetFromAirport()) {
      this.fromAirport = other.fromAirport;
    }
    if (other.isSetFromDate()) {
      this.fromDate = other.fromDate;
    }
    if (other.isSetFromTime()) {
      this.fromTime = other.fromTime;
    }
    if (other.isSetToCity()) {
      this.toCity = other.toCity;
    }
    if (other.isSetToAirport()) {
      this.toAirport = other.toAirport;
    }
    if (other.isSetToDate()) {
      this.toDate = other.toDate;
    }
    if (other.isSetToTime()) {
      this.toTime = other.toTime;
    }
    if (other.isSetGalileoShoppingFlightList()) {
      List<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight> __this__galileoShoppingFlightList = new ArrayList<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight>();
      for (com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight other_element : other.galileoShoppingFlightList) {
        __this__galileoShoppingFlightList.add(new com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight(other_element));
      }
      this.galileoShoppingFlightList = __this__galileoShoppingFlightList;
    }
  }

  public GalileoShoppingProcess deepCopy() {
    return new GalileoShoppingProcess(this);
  }

  @Override
  public void clear() {
    this.fromCity = null;
    this.fromAirport = null;
    this.fromDate = null;
    this.fromTime = null;
    this.toCity = null;
    this.toAirport = null;
    this.toDate = null;
    this.toTime = null;
    this.galileoShoppingFlightList = null;
  }

  public String getFromCity() {
    return this.fromCity;
  }

  public GalileoShoppingProcess setFromCity(String fromCity) {
    this.fromCity = fromCity;
    return this;
  }

  public void unsetFromCity() {
    this.fromCity = null;
  }

  /** Returns true if field fromCity is set (has been assigned a value) and false otherwise */
  public boolean isSetFromCity() {
    return this.fromCity != null;
  }

  public void setFromCityIsSet(boolean value) {
    if (!value) {
      this.fromCity = null;
    }
  }

  public String getFromAirport() {
    return this.fromAirport;
  }

  public GalileoShoppingProcess setFromAirport(String fromAirport) {
    this.fromAirport = fromAirport;
    return this;
  }

  public void unsetFromAirport() {
    this.fromAirport = null;
  }

  /** Returns true if field fromAirport is set (has been assigned a value) and false otherwise */
  public boolean isSetFromAirport() {
    return this.fromAirport != null;
  }

  public void setFromAirportIsSet(boolean value) {
    if (!value) {
      this.fromAirport = null;
    }
  }

  public String getFromDate() {
    return this.fromDate;
  }

  public GalileoShoppingProcess setFromDate(String fromDate) {
    this.fromDate = fromDate;
    return this;
  }

  public void unsetFromDate() {
    this.fromDate = null;
  }

  /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromDate() {
    return this.fromDate != null;
  }

  public void setFromDateIsSet(boolean value) {
    if (!value) {
      this.fromDate = null;
    }
  }

  public String getFromTime() {
    return this.fromTime;
  }

  public GalileoShoppingProcess setFromTime(String fromTime) {
    this.fromTime = fromTime;
    return this;
  }

  public void unsetFromTime() {
    this.fromTime = null;
  }

  /** Returns true if field fromTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTime() {
    return this.fromTime != null;
  }

  public void setFromTimeIsSet(boolean value) {
    if (!value) {
      this.fromTime = null;
    }
  }

  public String getToCity() {
    return this.toCity;
  }

  public GalileoShoppingProcess setToCity(String toCity) {
    this.toCity = toCity;
    return this;
  }

  public void unsetToCity() {
    this.toCity = null;
  }

  /** Returns true if field toCity is set (has been assigned a value) and false otherwise */
  public boolean isSetToCity() {
    return this.toCity != null;
  }

  public void setToCityIsSet(boolean value) {
    if (!value) {
      this.toCity = null;
    }
  }

  public String getToAirport() {
    return this.toAirport;
  }

  public GalileoShoppingProcess setToAirport(String toAirport) {
    this.toAirport = toAirport;
    return this;
  }

  public void unsetToAirport() {
    this.toAirport = null;
  }

  /** Returns true if field toAirport is set (has been assigned a value) and false otherwise */
  public boolean isSetToAirport() {
    return this.toAirport != null;
  }

  public void setToAirportIsSet(boolean value) {
    if (!value) {
      this.toAirport = null;
    }
  }

  public String getToDate() {
    return this.toDate;
  }

  public GalileoShoppingProcess setToDate(String toDate) {
    this.toDate = toDate;
    return this;
  }

  public void unsetToDate() {
    this.toDate = null;
  }

  /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
  public boolean isSetToDate() {
    return this.toDate != null;
  }

  public void setToDateIsSet(boolean value) {
    if (!value) {
      this.toDate = null;
    }
  }

  public String getToTime() {
    return this.toTime;
  }

  public GalileoShoppingProcess setToTime(String toTime) {
    this.toTime = toTime;
    return this;
  }

  public void unsetToTime() {
    this.toTime = null;
  }

  /** Returns true if field toTime is set (has been assigned a value) and false otherwise */
  public boolean isSetToTime() {
    return this.toTime != null;
  }

  public void setToTimeIsSet(boolean value) {
    if (!value) {
      this.toTime = null;
    }
  }

  public int getGalileoShoppingFlightListSize() {
    return (this.galileoShoppingFlightList == null) ? 0 : this.galileoShoppingFlightList.size();
  }

  public java.util.Iterator<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight> getGalileoShoppingFlightListIterator() {
    return (this.galileoShoppingFlightList == null) ? null : this.galileoShoppingFlightList.iterator();
  }

  public void addToGalileoShoppingFlightList(com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight elem) {
    if (this.galileoShoppingFlightList == null) {
      this.galileoShoppingFlightList = new ArrayList<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight>();
    }
    this.galileoShoppingFlightList.add(elem);
  }

  public List<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight> getGalileoShoppingFlightList() {
    return this.galileoShoppingFlightList;
  }

  public GalileoShoppingProcess setGalileoShoppingFlightList(List<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight> galileoShoppingFlightList) {
    this.galileoShoppingFlightList = galileoShoppingFlightList;
    return this;
  }

  public void unsetGalileoShoppingFlightList() {
    this.galileoShoppingFlightList = null;
  }

  /** Returns true if field galileoShoppingFlightList is set (has been assigned a value) and false otherwise */
  public boolean isSetGalileoShoppingFlightList() {
    return this.galileoShoppingFlightList != null;
  }

  public void setGalileoShoppingFlightListIsSet(boolean value) {
    if (!value) {
      this.galileoShoppingFlightList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FROM_CITY:
      if (value == null) {
        unsetFromCity();
      } else {
        setFromCity((String)value);
      }
      break;

    case FROM_AIRPORT:
      if (value == null) {
        unsetFromAirport();
      } else {
        setFromAirport((String)value);
      }
      break;

    case FROM_DATE:
      if (value == null) {
        unsetFromDate();
      } else {
        setFromDate((String)value);
      }
      break;

    case FROM_TIME:
      if (value == null) {
        unsetFromTime();
      } else {
        setFromTime((String)value);
      }
      break;

    case TO_CITY:
      if (value == null) {
        unsetToCity();
      } else {
        setToCity((String)value);
      }
      break;

    case TO_AIRPORT:
      if (value == null) {
        unsetToAirport();
      } else {
        setToAirport((String)value);
      }
      break;

    case TO_DATE:
      if (value == null) {
        unsetToDate();
      } else {
        setToDate((String)value);
      }
      break;

    case TO_TIME:
      if (value == null) {
        unsetToTime();
      } else {
        setToTime((String)value);
      }
      break;

    case GALILEO_SHOPPING_FLIGHT_LIST:
      if (value == null) {
        unsetGalileoShoppingFlightList();
      } else {
        setGalileoShoppingFlightList((List<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_CITY:
      return getFromCity();

    case FROM_AIRPORT:
      return getFromAirport();

    case FROM_DATE:
      return getFromDate();

    case FROM_TIME:
      return getFromTime();

    case TO_CITY:
      return getToCity();

    case TO_AIRPORT:
      return getToAirport();

    case TO_DATE:
      return getToDate();

    case TO_TIME:
      return getToTime();

    case GALILEO_SHOPPING_FLIGHT_LIST:
      return getGalileoShoppingFlightList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FROM_CITY:
      return isSetFromCity();
    case FROM_AIRPORT:
      return isSetFromAirport();
    case FROM_DATE:
      return isSetFromDate();
    case FROM_TIME:
      return isSetFromTime();
    case TO_CITY:
      return isSetToCity();
    case TO_AIRPORT:
      return isSetToAirport();
    case TO_DATE:
      return isSetToDate();
    case TO_TIME:
      return isSetToTime();
    case GALILEO_SHOPPING_FLIGHT_LIST:
      return isSetGalileoShoppingFlightList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GalileoShoppingProcess)
      return this.equals((GalileoShoppingProcess)that);
    return false;
  }

  public boolean equals(GalileoShoppingProcess that) {
    if (that == null)
      return false;

    boolean this_present_fromCity = true && this.isSetFromCity();
    boolean that_present_fromCity = true && that.isSetFromCity();
    if (this_present_fromCity || that_present_fromCity) {
      if (!(this_present_fromCity && that_present_fromCity))
        return false;
      if (!this.fromCity.equals(that.fromCity))
        return false;
    }

    boolean this_present_fromAirport = true && this.isSetFromAirport();
    boolean that_present_fromAirport = true && that.isSetFromAirport();
    if (this_present_fromAirport || that_present_fromAirport) {
      if (!(this_present_fromAirport && that_present_fromAirport))
        return false;
      if (!this.fromAirport.equals(that.fromAirport))
        return false;
    }

    boolean this_present_fromDate = true && this.isSetFromDate();
    boolean that_present_fromDate = true && that.isSetFromDate();
    if (this_present_fromDate || that_present_fromDate) {
      if (!(this_present_fromDate && that_present_fromDate))
        return false;
      if (!this.fromDate.equals(that.fromDate))
        return false;
    }

    boolean this_present_fromTime = true && this.isSetFromTime();
    boolean that_present_fromTime = true && that.isSetFromTime();
    if (this_present_fromTime || that_present_fromTime) {
      if (!(this_present_fromTime && that_present_fromTime))
        return false;
      if (!this.fromTime.equals(that.fromTime))
        return false;
    }

    boolean this_present_toCity = true && this.isSetToCity();
    boolean that_present_toCity = true && that.isSetToCity();
    if (this_present_toCity || that_present_toCity) {
      if (!(this_present_toCity && that_present_toCity))
        return false;
      if (!this.toCity.equals(that.toCity))
        return false;
    }

    boolean this_present_toAirport = true && this.isSetToAirport();
    boolean that_present_toAirport = true && that.isSetToAirport();
    if (this_present_toAirport || that_present_toAirport) {
      if (!(this_present_toAirport && that_present_toAirport))
        return false;
      if (!this.toAirport.equals(that.toAirport))
        return false;
    }

    boolean this_present_toDate = true && this.isSetToDate();
    boolean that_present_toDate = true && that.isSetToDate();
    if (this_present_toDate || that_present_toDate) {
      if (!(this_present_toDate && that_present_toDate))
        return false;
      if (!this.toDate.equals(that.toDate))
        return false;
    }

    boolean this_present_toTime = true && this.isSetToTime();
    boolean that_present_toTime = true && that.isSetToTime();
    if (this_present_toTime || that_present_toTime) {
      if (!(this_present_toTime && that_present_toTime))
        return false;
      if (!this.toTime.equals(that.toTime))
        return false;
    }

    boolean this_present_galileoShoppingFlightList = true && this.isSetGalileoShoppingFlightList();
    boolean that_present_galileoShoppingFlightList = true && that.isSetGalileoShoppingFlightList();
    if (this_present_galileoShoppingFlightList || that_present_galileoShoppingFlightList) {
      if (!(this_present_galileoShoppingFlightList && that_present_galileoShoppingFlightList))
        return false;
      if (!this.galileoShoppingFlightList.equals(that.galileoShoppingFlightList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GalileoShoppingProcess other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GalileoShoppingProcess typedOther = (GalileoShoppingProcess)other;

    lastComparison = Boolean.valueOf(isSetFromCity()).compareTo(typedOther.isSetFromCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromCity, typedOther.fromCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromAirport()).compareTo(typedOther.isSetFromAirport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromAirport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromAirport, typedOther.fromAirport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromTime()).compareTo(typedOther.isSetFromTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTime, typedOther.fromTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToCity()).compareTo(typedOther.isSetToCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toCity, typedOther.toCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToAirport()).compareTo(typedOther.isSetToAirport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToAirport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toAirport, typedOther.toAirport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToTime()).compareTo(typedOther.isSetToTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTime, typedOther.toTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGalileoShoppingFlightList()).compareTo(typedOther.isSetGalileoShoppingFlightList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGalileoShoppingFlightList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.galileoShoppingFlightList, typedOther.galileoShoppingFlightList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GalileoShoppingProcess(");
    boolean first = true;

    if (isSetFromCity()) {
      sb.append("fromCity:");
      if (this.fromCity == null) {
        sb.append("null");
      } else {
        sb.append(this.fromCity);
      }
      first = false;
    }
    if (isSetFromAirport()) {
      if (!first) sb.append(", ");
      sb.append("fromAirport:");
      if (this.fromAirport == null) {
        sb.append("null");
      } else {
        sb.append(this.fromAirport);
      }
      first = false;
    }
    if (isSetFromDate()) {
      if (!first) sb.append(", ");
      sb.append("fromDate:");
      if (this.fromDate == null) {
        sb.append("null");
      } else {
        sb.append(this.fromDate);
      }
      first = false;
    }
    if (isSetFromTime()) {
      if (!first) sb.append(", ");
      sb.append("fromTime:");
      if (this.fromTime == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTime);
      }
      first = false;
    }
    if (isSetToCity()) {
      if (!first) sb.append(", ");
      sb.append("toCity:");
      if (this.toCity == null) {
        sb.append("null");
      } else {
        sb.append(this.toCity);
      }
      first = false;
    }
    if (isSetToAirport()) {
      if (!first) sb.append(", ");
      sb.append("toAirport:");
      if (this.toAirport == null) {
        sb.append("null");
      } else {
        sb.append(this.toAirport);
      }
      first = false;
    }
    if (isSetToDate()) {
      if (!first) sb.append(", ");
      sb.append("toDate:");
      if (this.toDate == null) {
        sb.append("null");
      } else {
        sb.append(this.toDate);
      }
      first = false;
    }
    if (isSetToTime()) {
      if (!first) sb.append(", ");
      sb.append("toTime:");
      if (this.toTime == null) {
        sb.append("null");
      } else {
        sb.append(this.toTime);
      }
      first = false;
    }
    if (isSetGalileoShoppingFlightList()) {
      if (!first) sb.append(", ");
      sb.append("galileoShoppingFlightList:");
      if (this.galileoShoppingFlightList == null) {
        sb.append("null");
      } else {
        sb.append(this.galileoShoppingFlightList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GalileoShoppingProcessStandardSchemeFactory implements SchemeFactory {
    public GalileoShoppingProcessStandardScheme getScheme() {
      return new GalileoShoppingProcessStandardScheme();
    }
  }

  private static class GalileoShoppingProcessStandardScheme extends StandardScheme<GalileoShoppingProcess> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GalileoShoppingProcess struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromCity = iprot.readString();
              struct.setFromCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM_AIRPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromAirport = iprot.readString();
              struct.setFromAirportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromDate = iprot.readString();
              struct.setFromDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromTime = iprot.readString();
              struct.setFromTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toCity = iprot.readString();
              struct.setToCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TO_AIRPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toAirport = iprot.readString();
              struct.setToAirportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TO_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toDate = iprot.readString();
              struct.setToDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TO_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toTime = iprot.readString();
              struct.setToTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GALILEO_SHOPPING_FLIGHT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.galileoShoppingFlightList = new ArrayList<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight _elem2; // required
                  _elem2 = new com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight();
                  _elem2.read(iprot);
                  struct.galileoShoppingFlightList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setGalileoShoppingFlightListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GalileoShoppingProcess struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fromCity != null) {
        if (struct.isSetFromCity()) {
          oprot.writeFieldBegin(FROM_CITY_FIELD_DESC);
          oprot.writeString(struct.fromCity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromAirport != null) {
        if (struct.isSetFromAirport()) {
          oprot.writeFieldBegin(FROM_AIRPORT_FIELD_DESC);
          oprot.writeString(struct.fromAirport);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromDate != null) {
        if (struct.isSetFromDate()) {
          oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
          oprot.writeString(struct.fromDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromTime != null) {
        if (struct.isSetFromTime()) {
          oprot.writeFieldBegin(FROM_TIME_FIELD_DESC);
          oprot.writeString(struct.fromTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toCity != null) {
        if (struct.isSetToCity()) {
          oprot.writeFieldBegin(TO_CITY_FIELD_DESC);
          oprot.writeString(struct.toCity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toAirport != null) {
        if (struct.isSetToAirport()) {
          oprot.writeFieldBegin(TO_AIRPORT_FIELD_DESC);
          oprot.writeString(struct.toAirport);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toDate != null) {
        if (struct.isSetToDate()) {
          oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
          oprot.writeString(struct.toDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toTime != null) {
        if (struct.isSetToTime()) {
          oprot.writeFieldBegin(TO_TIME_FIELD_DESC);
          oprot.writeString(struct.toTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.galileoShoppingFlightList != null) {
        if (struct.isSetGalileoShoppingFlightList()) {
          oprot.writeFieldBegin(GALILEO_SHOPPING_FLIGHT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.galileoShoppingFlightList.size()));
            for (com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight _iter3 : struct.galileoShoppingFlightList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GalileoShoppingProcessTupleSchemeFactory implements SchemeFactory {
    public GalileoShoppingProcessTupleScheme getScheme() {
      return new GalileoShoppingProcessTupleScheme();
    }
  }

  private static class GalileoShoppingProcessTupleScheme extends TupleScheme<GalileoShoppingProcess> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GalileoShoppingProcess struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFromCity()) {
        optionals.set(0);
      }
      if (struct.isSetFromAirport()) {
        optionals.set(1);
      }
      if (struct.isSetFromDate()) {
        optionals.set(2);
      }
      if (struct.isSetFromTime()) {
        optionals.set(3);
      }
      if (struct.isSetToCity()) {
        optionals.set(4);
      }
      if (struct.isSetToAirport()) {
        optionals.set(5);
      }
      if (struct.isSetToDate()) {
        optionals.set(6);
      }
      if (struct.isSetToTime()) {
        optionals.set(7);
      }
      if (struct.isSetGalileoShoppingFlightList()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetFromCity()) {
        oprot.writeString(struct.fromCity);
      }
      if (struct.isSetFromAirport()) {
        oprot.writeString(struct.fromAirport);
      }
      if (struct.isSetFromDate()) {
        oprot.writeString(struct.fromDate);
      }
      if (struct.isSetFromTime()) {
        oprot.writeString(struct.fromTime);
      }
      if (struct.isSetToCity()) {
        oprot.writeString(struct.toCity);
      }
      if (struct.isSetToAirport()) {
        oprot.writeString(struct.toAirport);
      }
      if (struct.isSetToDate()) {
        oprot.writeString(struct.toDate);
      }
      if (struct.isSetToTime()) {
        oprot.writeString(struct.toTime);
      }
      if (struct.isSetGalileoShoppingFlightList()) {
        {
          oprot.writeI32(struct.galileoShoppingFlightList.size());
          for (com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight _iter4 : struct.galileoShoppingFlightList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GalileoShoppingProcess struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.fromCity = iprot.readString();
        struct.setFromCityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fromAirport = iprot.readString();
        struct.setFromAirportIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fromDate = iprot.readString();
        struct.setFromDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromTime = iprot.readString();
        struct.setFromTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.toCity = iprot.readString();
        struct.setToCityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.toAirport = iprot.readString();
        struct.setToAirportIsSet(true);
      }
      if (incoming.get(6)) {
        struct.toDate = iprot.readString();
        struct.setToDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.toTime = iprot.readString();
        struct.setToTimeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.galileoShoppingFlightList = new ArrayList<com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight _elem7; // required
            _elem7 = new com.travelzen.fare.galileo.shopping.flight.GalileoShoppingFlight();
            _elem7.read(iprot);
            struct.galileoShoppingFlightList.add(_elem7);
          }
        }
        struct.setGalileoShoppingFlightListIsSet(true);
      }
    }
  }

}

