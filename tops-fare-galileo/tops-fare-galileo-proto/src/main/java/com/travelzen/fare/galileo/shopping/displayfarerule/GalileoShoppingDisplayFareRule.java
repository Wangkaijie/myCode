/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.fare.galileo.shopping.displayfarerule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GalileoShoppingDisplayFareRule implements org.apache.thrift.TBase<GalileoShoppingDisplayFareRule, GalileoShoppingDisplayFareRule._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GalileoShoppingDisplayFareRule");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("refund", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ENDORSE_FIELD_DESC = new org.apache.thrift.protocol.TField("endorse", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BAGGAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("baggage", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OTHER_FIELD_DESC = new org.apache.thrift.protocol.TField("other", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GalileoShoppingDisplayFareRuleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GalileoShoppingDisplayFareRuleTupleSchemeFactory());
  }

  public String id; // required
  public long lastUpdateTime; // optional
  public String refund; // optional
  public String endorse; // optional
  public String baggage; // optional
  public String other; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LAST_UPDATE_TIME((short)2, "lastUpdateTime"),
    REFUND((short)11, "refund"),
    ENDORSE((short)12, "endorse"),
    BAGGAGE((short)13, "baggage"),
    OTHER((short)14, "other");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 11: // REFUND
          return REFUND;
        case 12: // ENDORSE
          return ENDORSE;
        case 13: // BAGGAGE
          return BAGGAGE;
        case 14: // OTHER
          return OTHER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTUPDATETIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LAST_UPDATE_TIME,_Fields.REFUND,_Fields.ENDORSE,_Fields.BAGGAGE,_Fields.OTHER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REFUND, new org.apache.thrift.meta_data.FieldMetaData("refund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDORSE, new org.apache.thrift.meta_data.FieldMetaData("endorse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAGGAGE, new org.apache.thrift.meta_data.FieldMetaData("baggage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER, new org.apache.thrift.meta_data.FieldMetaData("other", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GalileoShoppingDisplayFareRule.class, metaDataMap);
  }

  public GalileoShoppingDisplayFareRule() {
  }

  public GalileoShoppingDisplayFareRule(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GalileoShoppingDisplayFareRule(GalileoShoppingDisplayFareRule other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.lastUpdateTime = other.lastUpdateTime;
    if (other.isSetRefund()) {
      this.refund = other.refund;
    }
    if (other.isSetEndorse()) {
      this.endorse = other.endorse;
    }
    if (other.isSetBaggage()) {
      this.baggage = other.baggage;
    }
    if (other.isSetOther()) {
      this.other = other.other;
    }
  }

  public GalileoShoppingDisplayFareRule deepCopy() {
    return new GalileoShoppingDisplayFareRule(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setLastUpdateTimeIsSet(false);
    this.lastUpdateTime = 0;
    this.refund = null;
    this.endorse = null;
    this.baggage = null;
    this.other = null;
  }

  public String getId() {
    return this.id;
  }

  public GalileoShoppingDisplayFareRule setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public GalileoShoppingDisplayFareRule setLastUpdateTime(long lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    setLastUpdateTimeIsSet(true);
    return this;
  }

  public void unsetLastUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATETIME_ISSET_ID);
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATETIME_ISSET_ID);
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATETIME_ISSET_ID, value);
  }

  public String getRefund() {
    return this.refund;
  }

  public GalileoShoppingDisplayFareRule setRefund(String refund) {
    this.refund = refund;
    return this;
  }

  public void unsetRefund() {
    this.refund = null;
  }

  /** Returns true if field refund is set (has been assigned a value) and false otherwise */
  public boolean isSetRefund() {
    return this.refund != null;
  }

  public void setRefundIsSet(boolean value) {
    if (!value) {
      this.refund = null;
    }
  }

  public String getEndorse() {
    return this.endorse;
  }

  public GalileoShoppingDisplayFareRule setEndorse(String endorse) {
    this.endorse = endorse;
    return this;
  }

  public void unsetEndorse() {
    this.endorse = null;
  }

  /** Returns true if field endorse is set (has been assigned a value) and false otherwise */
  public boolean isSetEndorse() {
    return this.endorse != null;
  }

  public void setEndorseIsSet(boolean value) {
    if (!value) {
      this.endorse = null;
    }
  }

  public String getBaggage() {
    return this.baggage;
  }

  public GalileoShoppingDisplayFareRule setBaggage(String baggage) {
    this.baggage = baggage;
    return this;
  }

  public void unsetBaggage() {
    this.baggage = null;
  }

  /** Returns true if field baggage is set (has been assigned a value) and false otherwise */
  public boolean isSetBaggage() {
    return this.baggage != null;
  }

  public void setBaggageIsSet(boolean value) {
    if (!value) {
      this.baggage = null;
    }
  }

  public String getOther() {
    return this.other;
  }

  public GalileoShoppingDisplayFareRule setOther(String other) {
    this.other = other;
    return this;
  }

  public void unsetOther() {
    this.other = null;
  }

  /** Returns true if field other is set (has been assigned a value) and false otherwise */
  public boolean isSetOther() {
    return this.other != null;
  }

  public void setOtherIsSet(boolean value) {
    if (!value) {
      this.other = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((Long)value);
      }
      break;

    case REFUND:
      if (value == null) {
        unsetRefund();
      } else {
        setRefund((String)value);
      }
      break;

    case ENDORSE:
      if (value == null) {
        unsetEndorse();
      } else {
        setEndorse((String)value);
      }
      break;

    case BAGGAGE:
      if (value == null) {
        unsetBaggage();
      } else {
        setBaggage((String)value);
      }
      break;

    case OTHER:
      if (value == null) {
        unsetOther();
      } else {
        setOther((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LAST_UPDATE_TIME:
      return Long.valueOf(getLastUpdateTime());

    case REFUND:
      return getRefund();

    case ENDORSE:
      return getEndorse();

    case BAGGAGE:
      return getBaggage();

    case OTHER:
      return getOther();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case REFUND:
      return isSetRefund();
    case ENDORSE:
      return isSetEndorse();
    case BAGGAGE:
      return isSetBaggage();
    case OTHER:
      return isSetOther();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GalileoShoppingDisplayFareRule)
      return this.equals((GalileoShoppingDisplayFareRule)that);
    return false;
  }

  public boolean equals(GalileoShoppingDisplayFareRule that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (this.lastUpdateTime != that.lastUpdateTime)
        return false;
    }

    boolean this_present_refund = true && this.isSetRefund();
    boolean that_present_refund = true && that.isSetRefund();
    if (this_present_refund || that_present_refund) {
      if (!(this_present_refund && that_present_refund))
        return false;
      if (!this.refund.equals(that.refund))
        return false;
    }

    boolean this_present_endorse = true && this.isSetEndorse();
    boolean that_present_endorse = true && that.isSetEndorse();
    if (this_present_endorse || that_present_endorse) {
      if (!(this_present_endorse && that_present_endorse))
        return false;
      if (!this.endorse.equals(that.endorse))
        return false;
    }

    boolean this_present_baggage = true && this.isSetBaggage();
    boolean that_present_baggage = true && that.isSetBaggage();
    if (this_present_baggage || that_present_baggage) {
      if (!(this_present_baggage && that_present_baggage))
        return false;
      if (!this.baggage.equals(that.baggage))
        return false;
    }

    boolean this_present_other = true && this.isSetOther();
    boolean that_present_other = true && that.isSetOther();
    if (this_present_other || that_present_other) {
      if (!(this_present_other && that_present_other))
        return false;
      if (!this.other.equals(that.other))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GalileoShoppingDisplayFareRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GalileoShoppingDisplayFareRule typedOther = (GalileoShoppingDisplayFareRule)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefund()).compareTo(typedOther.isSetRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refund, typedOther.refund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndorse()).compareTo(typedOther.isSetEndorse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndorse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endorse, typedOther.endorse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaggage()).compareTo(typedOther.isSetBaggage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaggage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baggage, typedOther.baggage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOther()).compareTo(typedOther.isSetOther());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other, typedOther.other);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GalileoShoppingDisplayFareRule(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetLastUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateTime:");
      sb.append(this.lastUpdateTime);
      first = false;
    }
    if (isSetRefund()) {
      if (!first) sb.append(", ");
      sb.append("refund:");
      if (this.refund == null) {
        sb.append("null");
      } else {
        sb.append(this.refund);
      }
      first = false;
    }
    if (isSetEndorse()) {
      if (!first) sb.append(", ");
      sb.append("endorse:");
      if (this.endorse == null) {
        sb.append("null");
      } else {
        sb.append(this.endorse);
      }
      first = false;
    }
    if (isSetBaggage()) {
      if (!first) sb.append(", ");
      sb.append("baggage:");
      if (this.baggage == null) {
        sb.append("null");
      } else {
        sb.append(this.baggage);
      }
      first = false;
    }
    if (isSetOther()) {
      if (!first) sb.append(", ");
      sb.append("other:");
      if (this.other == null) {
        sb.append("null");
      } else {
        sb.append(this.other);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GalileoShoppingDisplayFareRuleStandardSchemeFactory implements SchemeFactory {
    public GalileoShoppingDisplayFareRuleStandardScheme getScheme() {
      return new GalileoShoppingDisplayFareRuleStandardScheme();
    }
  }

  private static class GalileoShoppingDisplayFareRuleStandardScheme extends StandardScheme<GalileoShoppingDisplayFareRule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GalileoShoppingDisplayFareRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdateTime = iprot.readI64();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refund = iprot.readString();
              struct.setRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENDORSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endorse = iprot.readString();
              struct.setEndorseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BAGGAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.baggage = iprot.readString();
              struct.setBaggageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OTHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.other = iprot.readString();
              struct.setOtherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GalileoShoppingDisplayFareRule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.refund != null) {
        if (struct.isSetRefund()) {
          oprot.writeFieldBegin(REFUND_FIELD_DESC);
          oprot.writeString(struct.refund);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endorse != null) {
        if (struct.isSetEndorse()) {
          oprot.writeFieldBegin(ENDORSE_FIELD_DESC);
          oprot.writeString(struct.endorse);
          oprot.writeFieldEnd();
        }
      }
      if (struct.baggage != null) {
        if (struct.isSetBaggage()) {
          oprot.writeFieldBegin(BAGGAGE_FIELD_DESC);
          oprot.writeString(struct.baggage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.other != null) {
        if (struct.isSetOther()) {
          oprot.writeFieldBegin(OTHER_FIELD_DESC);
          oprot.writeString(struct.other);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GalileoShoppingDisplayFareRuleTupleSchemeFactory implements SchemeFactory {
    public GalileoShoppingDisplayFareRuleTupleScheme getScheme() {
      return new GalileoShoppingDisplayFareRuleTupleScheme();
    }
  }

  private static class GalileoShoppingDisplayFareRuleTupleScheme extends TupleScheme<GalileoShoppingDisplayFareRule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GalileoShoppingDisplayFareRule struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetLastUpdateTime()) {
        optionals.set(0);
      }
      if (struct.isSetRefund()) {
        optionals.set(1);
      }
      if (struct.isSetEndorse()) {
        optionals.set(2);
      }
      if (struct.isSetBaggage()) {
        optionals.set(3);
      }
      if (struct.isSetOther()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetLastUpdateTime()) {
        oprot.writeI64(struct.lastUpdateTime);
      }
      if (struct.isSetRefund()) {
        oprot.writeString(struct.refund);
      }
      if (struct.isSetEndorse()) {
        oprot.writeString(struct.endorse);
      }
      if (struct.isSetBaggage()) {
        oprot.writeString(struct.baggage);
      }
      if (struct.isSetOther()) {
        oprot.writeString(struct.other);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GalileoShoppingDisplayFareRule struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.lastUpdateTime = iprot.readI64();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.refund = iprot.readString();
        struct.setRefundIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endorse = iprot.readString();
        struct.setEndorseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.baggage = iprot.readString();
        struct.setBaggageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.other = iprot.readString();
        struct.setOtherIsSet(true);
      }
    }
  }

}

