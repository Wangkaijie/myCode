/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.fare.galileo.shopping.flight;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GalileoShoppingFlight implements org.apache.thrift.TBase<GalileoShoppingFlight, GalileoShoppingFlight._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GalileoShoppingFlight");

  private static final org.apache.thrift.protocol.TField FLIGHT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("flightKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("carrier", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField FLIGHT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("flightNumber", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField FROM_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromCity", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField FROM_AIRPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("fromAirport", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField FROM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTime", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField TO_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("toCity", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField TO_AIRPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("toAirport", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField TO_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toTime", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField ALL_CABIN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("allCabinInfo", org.apache.thrift.protocol.TType.MAP, (short)35);
  private static final org.apache.thrift.protocol.TField GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("galileoShoppingFlightStopOverList", org.apache.thrift.protocol.TType.LIST, (short)36);
  private static final org.apache.thrift.protocol.TField CODE_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("codeShare", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField BOOKING_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingClass", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField EQUIP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("equipType", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField CABIN_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("cabinClass", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField SEAT_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("seatLeft", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField MARKET_AIRLINES_FIELD_DESC = new org.apache.thrift.protocol.TField("marketAirlines", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField FARE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("farePrice", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField OPERATOR_AIRLINES_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorAirlines", org.apache.thrift.protocol.TType.STRING, (short)45);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GalileoShoppingFlightStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GalileoShoppingFlightTupleSchemeFactory());
  }

  public String flightKey; // optional
  public String carrier; // optional
  public String flightNumber; // optional
  public String fromCity; // optional
  public String fromAirport; // optional
  public String fromDate; // optional
  public String fromTime; // optional
  public String toCity; // optional
  public String toAirport; // optional
  public String toDate; // optional
  public String toTime; // optional
  public Map<String,String> allCabinInfo; // optional
  public List<GalileoShoppingFlightStopOver> galileoShoppingFlightStopOverList; // optional
  public String codeShare; // optional
  public String bookingClass; // optional
  public String equipType; // optional
  public String cabinClass; // optional
  public String duration; // optional
  public String seatLeft; // optional
  public String marketAirlines; // optional
  public int farePrice; // optional
  public String operatorAirlines; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FLIGHT_KEY((short)1, "flightKey"),
    CARRIER((short)21, "carrier"),
    FLIGHT_NUMBER((short)22, "flightNumber"),
    FROM_CITY((short)25, "fromCity"),
    FROM_AIRPORT((short)26, "fromAirport"),
    FROM_DATE((short)27, "fromDate"),
    FROM_TIME((short)28, "fromTime"),
    TO_CITY((short)30, "toCity"),
    TO_AIRPORT((short)31, "toAirport"),
    TO_DATE((short)32, "toDate"),
    TO_TIME((short)33, "toTime"),
    ALL_CABIN_INFO((short)35, "allCabinInfo"),
    GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST((short)36, "galileoShoppingFlightStopOverList"),
    CODE_SHARE((short)37, "codeShare"),
    BOOKING_CLASS((short)38, "bookingClass"),
    EQUIP_TYPE((short)39, "equipType"),
    CABIN_CLASS((short)40, "cabinClass"),
    DURATION((short)41, "duration"),
    SEAT_LEFT((short)42, "seatLeft"),
    MARKET_AIRLINES((short)43, "marketAirlines"),
    FARE_PRICE((short)44, "farePrice"),
    OPERATOR_AIRLINES((short)45, "operatorAirlines");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FLIGHT_KEY
          return FLIGHT_KEY;
        case 21: // CARRIER
          return CARRIER;
        case 22: // FLIGHT_NUMBER
          return FLIGHT_NUMBER;
        case 25: // FROM_CITY
          return FROM_CITY;
        case 26: // FROM_AIRPORT
          return FROM_AIRPORT;
        case 27: // FROM_DATE
          return FROM_DATE;
        case 28: // FROM_TIME
          return FROM_TIME;
        case 30: // TO_CITY
          return TO_CITY;
        case 31: // TO_AIRPORT
          return TO_AIRPORT;
        case 32: // TO_DATE
          return TO_DATE;
        case 33: // TO_TIME
          return TO_TIME;
        case 35: // ALL_CABIN_INFO
          return ALL_CABIN_INFO;
        case 36: // GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST
          return GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST;
        case 37: // CODE_SHARE
          return CODE_SHARE;
        case 38: // BOOKING_CLASS
          return BOOKING_CLASS;
        case 39: // EQUIP_TYPE
          return EQUIP_TYPE;
        case 40: // CABIN_CLASS
          return CABIN_CLASS;
        case 41: // DURATION
          return DURATION;
        case 42: // SEAT_LEFT
          return SEAT_LEFT;
        case 43: // MARKET_AIRLINES
          return MARKET_AIRLINES;
        case 44: // FARE_PRICE
          return FARE_PRICE;
        case 45: // OPERATOR_AIRLINES
          return OPERATOR_AIRLINES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FAREPRICE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FLIGHT_KEY,_Fields.CARRIER,_Fields.FLIGHT_NUMBER,_Fields.FROM_CITY,_Fields.FROM_AIRPORT,_Fields.FROM_DATE,_Fields.FROM_TIME,_Fields.TO_CITY,_Fields.TO_AIRPORT,_Fields.TO_DATE,_Fields.TO_TIME,_Fields.ALL_CABIN_INFO,_Fields.GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST,_Fields.CODE_SHARE,_Fields.BOOKING_CLASS,_Fields.EQUIP_TYPE,_Fields.CABIN_CLASS,_Fields.DURATION,_Fields.SEAT_LEFT,_Fields.MARKET_AIRLINES,_Fields.FARE_PRICE,_Fields.OPERATOR_AIRLINES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FLIGHT_KEY, new org.apache.thrift.meta_data.FieldMetaData("flightKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARRIER, new org.apache.thrift.meta_data.FieldMetaData("carrier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLIGHT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("flightNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_CITY, new org.apache.thrift.meta_data.FieldMetaData("fromCity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_AIRPORT, new org.apache.thrift.meta_data.FieldMetaData("fromAirport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_TIME, new org.apache.thrift.meta_data.FieldMetaData("fromTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_CITY, new org.apache.thrift.meta_data.FieldMetaData("toCity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_AIRPORT, new org.apache.thrift.meta_data.FieldMetaData("toAirport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_TIME, new org.apache.thrift.meta_data.FieldMetaData("toTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALL_CABIN_INFO, new org.apache.thrift.meta_data.FieldMetaData("allCabinInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST, new org.apache.thrift.meta_data.FieldMetaData("galileoShoppingFlightStopOverList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GalileoShoppingFlightStopOver.class))));
    tmpMap.put(_Fields.CODE_SHARE, new org.apache.thrift.meta_data.FieldMetaData("codeShare", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOKING_CLASS, new org.apache.thrift.meta_data.FieldMetaData("bookingClass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EQUIP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("equipType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CABIN_CLASS, new org.apache.thrift.meta_data.FieldMetaData("cabinClass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEAT_LEFT, new org.apache.thrift.meta_data.FieldMetaData("seatLeft", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARKET_AIRLINES, new org.apache.thrift.meta_data.FieldMetaData("marketAirlines", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FARE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("farePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_AIRLINES, new org.apache.thrift.meta_data.FieldMetaData("operatorAirlines", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GalileoShoppingFlight.class, metaDataMap);
  }

  public GalileoShoppingFlight() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GalileoShoppingFlight(GalileoShoppingFlight other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFlightKey()) {
      this.flightKey = other.flightKey;
    }
    if (other.isSetCarrier()) {
      this.carrier = other.carrier;
    }
    if (other.isSetFlightNumber()) {
      this.flightNumber = other.flightNumber;
    }
    if (other.isSetFromCity()) {
      this.fromCity = other.fromCity;
    }
    if (other.isSetFromAirport()) {
      this.fromAirport = other.fromAirport;
    }
    if (other.isSetFromDate()) {
      this.fromDate = other.fromDate;
    }
    if (other.isSetFromTime()) {
      this.fromTime = other.fromTime;
    }
    if (other.isSetToCity()) {
      this.toCity = other.toCity;
    }
    if (other.isSetToAirport()) {
      this.toAirport = other.toAirport;
    }
    if (other.isSetToDate()) {
      this.toDate = other.toDate;
    }
    if (other.isSetToTime()) {
      this.toTime = other.toTime;
    }
    if (other.isSetAllCabinInfo()) {
      Map<String,String> __this__allCabinInfo = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.allCabinInfo.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__allCabinInfo_copy_key = other_element_key;

        String __this__allCabinInfo_copy_value = other_element_value;

        __this__allCabinInfo.put(__this__allCabinInfo_copy_key, __this__allCabinInfo_copy_value);
      }
      this.allCabinInfo = __this__allCabinInfo;
    }
    if (other.isSetGalileoShoppingFlightStopOverList()) {
      List<GalileoShoppingFlightStopOver> __this__galileoShoppingFlightStopOverList = new ArrayList<GalileoShoppingFlightStopOver>();
      for (GalileoShoppingFlightStopOver other_element : other.galileoShoppingFlightStopOverList) {
        __this__galileoShoppingFlightStopOverList.add(new GalileoShoppingFlightStopOver(other_element));
      }
      this.galileoShoppingFlightStopOverList = __this__galileoShoppingFlightStopOverList;
    }
    if (other.isSetCodeShare()) {
      this.codeShare = other.codeShare;
    }
    if (other.isSetBookingClass()) {
      this.bookingClass = other.bookingClass;
    }
    if (other.isSetEquipType()) {
      this.equipType = other.equipType;
    }
    if (other.isSetCabinClass()) {
      this.cabinClass = other.cabinClass;
    }
    if (other.isSetDuration()) {
      this.duration = other.duration;
    }
    if (other.isSetSeatLeft()) {
      this.seatLeft = other.seatLeft;
    }
    if (other.isSetMarketAirlines()) {
      this.marketAirlines = other.marketAirlines;
    }
    this.farePrice = other.farePrice;
    if (other.isSetOperatorAirlines()) {
      this.operatorAirlines = other.operatorAirlines;
    }
  }

  public GalileoShoppingFlight deepCopy() {
    return new GalileoShoppingFlight(this);
  }

  @Override
  public void clear() {
    this.flightKey = null;
    this.carrier = null;
    this.flightNumber = null;
    this.fromCity = null;
    this.fromAirport = null;
    this.fromDate = null;
    this.fromTime = null;
    this.toCity = null;
    this.toAirport = null;
    this.toDate = null;
    this.toTime = null;
    this.allCabinInfo = null;
    this.galileoShoppingFlightStopOverList = null;
    this.codeShare = null;
    this.bookingClass = null;
    this.equipType = null;
    this.cabinClass = null;
    this.duration = null;
    this.seatLeft = null;
    this.marketAirlines = null;
    setFarePriceIsSet(false);
    this.farePrice = 0;
    this.operatorAirlines = null;
  }

  public String getFlightKey() {
    return this.flightKey;
  }

  public GalileoShoppingFlight setFlightKey(String flightKey) {
    this.flightKey = flightKey;
    return this;
  }

  public void unsetFlightKey() {
    this.flightKey = null;
  }

  /** Returns true if field flightKey is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightKey() {
    return this.flightKey != null;
  }

  public void setFlightKeyIsSet(boolean value) {
    if (!value) {
      this.flightKey = null;
    }
  }

  public String getCarrier() {
    return this.carrier;
  }

  public GalileoShoppingFlight setCarrier(String carrier) {
    this.carrier = carrier;
    return this;
  }

  public void unsetCarrier() {
    this.carrier = null;
  }

  /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
  public boolean isSetCarrier() {
    return this.carrier != null;
  }

  public void setCarrierIsSet(boolean value) {
    if (!value) {
      this.carrier = null;
    }
  }

  public String getFlightNumber() {
    return this.flightNumber;
  }

  public GalileoShoppingFlight setFlightNumber(String flightNumber) {
    this.flightNumber = flightNumber;
    return this;
  }

  public void unsetFlightNumber() {
    this.flightNumber = null;
  }

  /** Returns true if field flightNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightNumber() {
    return this.flightNumber != null;
  }

  public void setFlightNumberIsSet(boolean value) {
    if (!value) {
      this.flightNumber = null;
    }
  }

  public String getFromCity() {
    return this.fromCity;
  }

  public GalileoShoppingFlight setFromCity(String fromCity) {
    this.fromCity = fromCity;
    return this;
  }

  public void unsetFromCity() {
    this.fromCity = null;
  }

  /** Returns true if field fromCity is set (has been assigned a value) and false otherwise */
  public boolean isSetFromCity() {
    return this.fromCity != null;
  }

  public void setFromCityIsSet(boolean value) {
    if (!value) {
      this.fromCity = null;
    }
  }

  public String getFromAirport() {
    return this.fromAirport;
  }

  public GalileoShoppingFlight setFromAirport(String fromAirport) {
    this.fromAirport = fromAirport;
    return this;
  }

  public void unsetFromAirport() {
    this.fromAirport = null;
  }

  /** Returns true if field fromAirport is set (has been assigned a value) and false otherwise */
  public boolean isSetFromAirport() {
    return this.fromAirport != null;
  }

  public void setFromAirportIsSet(boolean value) {
    if (!value) {
      this.fromAirport = null;
    }
  }

  public String getFromDate() {
    return this.fromDate;
  }

  public GalileoShoppingFlight setFromDate(String fromDate) {
    this.fromDate = fromDate;
    return this;
  }

  public void unsetFromDate() {
    this.fromDate = null;
  }

  /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromDate() {
    return this.fromDate != null;
  }

  public void setFromDateIsSet(boolean value) {
    if (!value) {
      this.fromDate = null;
    }
  }

  public String getFromTime() {
    return this.fromTime;
  }

  public GalileoShoppingFlight setFromTime(String fromTime) {
    this.fromTime = fromTime;
    return this;
  }

  public void unsetFromTime() {
    this.fromTime = null;
  }

  /** Returns true if field fromTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTime() {
    return this.fromTime != null;
  }

  public void setFromTimeIsSet(boolean value) {
    if (!value) {
      this.fromTime = null;
    }
  }

  public String getToCity() {
    return this.toCity;
  }

  public GalileoShoppingFlight setToCity(String toCity) {
    this.toCity = toCity;
    return this;
  }

  public void unsetToCity() {
    this.toCity = null;
  }

  /** Returns true if field toCity is set (has been assigned a value) and false otherwise */
  public boolean isSetToCity() {
    return this.toCity != null;
  }

  public void setToCityIsSet(boolean value) {
    if (!value) {
      this.toCity = null;
    }
  }

  public String getToAirport() {
    return this.toAirport;
  }

  public GalileoShoppingFlight setToAirport(String toAirport) {
    this.toAirport = toAirport;
    return this;
  }

  public void unsetToAirport() {
    this.toAirport = null;
  }

  /** Returns true if field toAirport is set (has been assigned a value) and false otherwise */
  public boolean isSetToAirport() {
    return this.toAirport != null;
  }

  public void setToAirportIsSet(boolean value) {
    if (!value) {
      this.toAirport = null;
    }
  }

  public String getToDate() {
    return this.toDate;
  }

  public GalileoShoppingFlight setToDate(String toDate) {
    this.toDate = toDate;
    return this;
  }

  public void unsetToDate() {
    this.toDate = null;
  }

  /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
  public boolean isSetToDate() {
    return this.toDate != null;
  }

  public void setToDateIsSet(boolean value) {
    if (!value) {
      this.toDate = null;
    }
  }

  public String getToTime() {
    return this.toTime;
  }

  public GalileoShoppingFlight setToTime(String toTime) {
    this.toTime = toTime;
    return this;
  }

  public void unsetToTime() {
    this.toTime = null;
  }

  /** Returns true if field toTime is set (has been assigned a value) and false otherwise */
  public boolean isSetToTime() {
    return this.toTime != null;
  }

  public void setToTimeIsSet(boolean value) {
    if (!value) {
      this.toTime = null;
    }
  }

  public int getAllCabinInfoSize() {
    return (this.allCabinInfo == null) ? 0 : this.allCabinInfo.size();
  }

  public void putToAllCabinInfo(String key, String val) {
    if (this.allCabinInfo == null) {
      this.allCabinInfo = new HashMap<String,String>();
    }
    this.allCabinInfo.put(key, val);
  }

  public Map<String,String> getAllCabinInfo() {
    return this.allCabinInfo;
  }

  public GalileoShoppingFlight setAllCabinInfo(Map<String,String> allCabinInfo) {
    this.allCabinInfo = allCabinInfo;
    return this;
  }

  public void unsetAllCabinInfo() {
    this.allCabinInfo = null;
  }

  /** Returns true if field allCabinInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAllCabinInfo() {
    return this.allCabinInfo != null;
  }

  public void setAllCabinInfoIsSet(boolean value) {
    if (!value) {
      this.allCabinInfo = null;
    }
  }

  public int getGalileoShoppingFlightStopOverListSize() {
    return (this.galileoShoppingFlightStopOverList == null) ? 0 : this.galileoShoppingFlightStopOverList.size();
  }

  public java.util.Iterator<GalileoShoppingFlightStopOver> getGalileoShoppingFlightStopOverListIterator() {
    return (this.galileoShoppingFlightStopOverList == null) ? null : this.galileoShoppingFlightStopOverList.iterator();
  }

  public void addToGalileoShoppingFlightStopOverList(GalileoShoppingFlightStopOver elem) {
    if (this.galileoShoppingFlightStopOverList == null) {
      this.galileoShoppingFlightStopOverList = new ArrayList<GalileoShoppingFlightStopOver>();
    }
    this.galileoShoppingFlightStopOverList.add(elem);
  }

  public List<GalileoShoppingFlightStopOver> getGalileoShoppingFlightStopOverList() {
    return this.galileoShoppingFlightStopOverList;
  }

  public GalileoShoppingFlight setGalileoShoppingFlightStopOverList(List<GalileoShoppingFlightStopOver> galileoShoppingFlightStopOverList) {
    this.galileoShoppingFlightStopOverList = galileoShoppingFlightStopOverList;
    return this;
  }

  public void unsetGalileoShoppingFlightStopOverList() {
    this.galileoShoppingFlightStopOverList = null;
  }

  /** Returns true if field galileoShoppingFlightStopOverList is set (has been assigned a value) and false otherwise */
  public boolean isSetGalileoShoppingFlightStopOverList() {
    return this.galileoShoppingFlightStopOverList != null;
  }

  public void setGalileoShoppingFlightStopOverListIsSet(boolean value) {
    if (!value) {
      this.galileoShoppingFlightStopOverList = null;
    }
  }

  public String getCodeShare() {
    return this.codeShare;
  }

  public GalileoShoppingFlight setCodeShare(String codeShare) {
    this.codeShare = codeShare;
    return this;
  }

  public void unsetCodeShare() {
    this.codeShare = null;
  }

  /** Returns true if field codeShare is set (has been assigned a value) and false otherwise */
  public boolean isSetCodeShare() {
    return this.codeShare != null;
  }

  public void setCodeShareIsSet(boolean value) {
    if (!value) {
      this.codeShare = null;
    }
  }

  public String getBookingClass() {
    return this.bookingClass;
  }

  public GalileoShoppingFlight setBookingClass(String bookingClass) {
    this.bookingClass = bookingClass;
    return this;
  }

  public void unsetBookingClass() {
    this.bookingClass = null;
  }

  /** Returns true if field bookingClass is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingClass() {
    return this.bookingClass != null;
  }

  public void setBookingClassIsSet(boolean value) {
    if (!value) {
      this.bookingClass = null;
    }
  }

  public String getEquipType() {
    return this.equipType;
  }

  public GalileoShoppingFlight setEquipType(String equipType) {
    this.equipType = equipType;
    return this;
  }

  public void unsetEquipType() {
    this.equipType = null;
  }

  /** Returns true if field equipType is set (has been assigned a value) and false otherwise */
  public boolean isSetEquipType() {
    return this.equipType != null;
  }

  public void setEquipTypeIsSet(boolean value) {
    if (!value) {
      this.equipType = null;
    }
  }

  public String getCabinClass() {
    return this.cabinClass;
  }

  public GalileoShoppingFlight setCabinClass(String cabinClass) {
    this.cabinClass = cabinClass;
    return this;
  }

  public void unsetCabinClass() {
    this.cabinClass = null;
  }

  /** Returns true if field cabinClass is set (has been assigned a value) and false otherwise */
  public boolean isSetCabinClass() {
    return this.cabinClass != null;
  }

  public void setCabinClassIsSet(boolean value) {
    if (!value) {
      this.cabinClass = null;
    }
  }

  public String getDuration() {
    return this.duration;
  }

  public GalileoShoppingFlight setDuration(String duration) {
    this.duration = duration;
    return this;
  }

  public void unsetDuration() {
    this.duration = null;
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return this.duration != null;
  }

  public void setDurationIsSet(boolean value) {
    if (!value) {
      this.duration = null;
    }
  }

  public String getSeatLeft() {
    return this.seatLeft;
  }

  public GalileoShoppingFlight setSeatLeft(String seatLeft) {
    this.seatLeft = seatLeft;
    return this;
  }

  public void unsetSeatLeft() {
    this.seatLeft = null;
  }

  /** Returns true if field seatLeft is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatLeft() {
    return this.seatLeft != null;
  }

  public void setSeatLeftIsSet(boolean value) {
    if (!value) {
      this.seatLeft = null;
    }
  }

  public String getMarketAirlines() {
    return this.marketAirlines;
  }

  public GalileoShoppingFlight setMarketAirlines(String marketAirlines) {
    this.marketAirlines = marketAirlines;
    return this;
  }

  public void unsetMarketAirlines() {
    this.marketAirlines = null;
  }

  /** Returns true if field marketAirlines is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketAirlines() {
    return this.marketAirlines != null;
  }

  public void setMarketAirlinesIsSet(boolean value) {
    if (!value) {
      this.marketAirlines = null;
    }
  }

  public int getFarePrice() {
    return this.farePrice;
  }

  public GalileoShoppingFlight setFarePrice(int farePrice) {
    this.farePrice = farePrice;
    setFarePriceIsSet(true);
    return this;
  }

  public void unsetFarePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAREPRICE_ISSET_ID);
  }

  /** Returns true if field farePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetFarePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __FAREPRICE_ISSET_ID);
  }

  public void setFarePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAREPRICE_ISSET_ID, value);
  }

  public String getOperatorAirlines() {
    return this.operatorAirlines;
  }

  public GalileoShoppingFlight setOperatorAirlines(String operatorAirlines) {
    this.operatorAirlines = operatorAirlines;
    return this;
  }

  public void unsetOperatorAirlines() {
    this.operatorAirlines = null;
  }

  /** Returns true if field operatorAirlines is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorAirlines() {
    return this.operatorAirlines != null;
  }

  public void setOperatorAirlinesIsSet(boolean value) {
    if (!value) {
      this.operatorAirlines = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FLIGHT_KEY:
      if (value == null) {
        unsetFlightKey();
      } else {
        setFlightKey((String)value);
      }
      break;

    case CARRIER:
      if (value == null) {
        unsetCarrier();
      } else {
        setCarrier((String)value);
      }
      break;

    case FLIGHT_NUMBER:
      if (value == null) {
        unsetFlightNumber();
      } else {
        setFlightNumber((String)value);
      }
      break;

    case FROM_CITY:
      if (value == null) {
        unsetFromCity();
      } else {
        setFromCity((String)value);
      }
      break;

    case FROM_AIRPORT:
      if (value == null) {
        unsetFromAirport();
      } else {
        setFromAirport((String)value);
      }
      break;

    case FROM_DATE:
      if (value == null) {
        unsetFromDate();
      } else {
        setFromDate((String)value);
      }
      break;

    case FROM_TIME:
      if (value == null) {
        unsetFromTime();
      } else {
        setFromTime((String)value);
      }
      break;

    case TO_CITY:
      if (value == null) {
        unsetToCity();
      } else {
        setToCity((String)value);
      }
      break;

    case TO_AIRPORT:
      if (value == null) {
        unsetToAirport();
      } else {
        setToAirport((String)value);
      }
      break;

    case TO_DATE:
      if (value == null) {
        unsetToDate();
      } else {
        setToDate((String)value);
      }
      break;

    case TO_TIME:
      if (value == null) {
        unsetToTime();
      } else {
        setToTime((String)value);
      }
      break;

    case ALL_CABIN_INFO:
      if (value == null) {
        unsetAllCabinInfo();
      } else {
        setAllCabinInfo((Map<String,String>)value);
      }
      break;

    case GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST:
      if (value == null) {
        unsetGalileoShoppingFlightStopOverList();
      } else {
        setGalileoShoppingFlightStopOverList((List<GalileoShoppingFlightStopOver>)value);
      }
      break;

    case CODE_SHARE:
      if (value == null) {
        unsetCodeShare();
      } else {
        setCodeShare((String)value);
      }
      break;

    case BOOKING_CLASS:
      if (value == null) {
        unsetBookingClass();
      } else {
        setBookingClass((String)value);
      }
      break;

    case EQUIP_TYPE:
      if (value == null) {
        unsetEquipType();
      } else {
        setEquipType((String)value);
      }
      break;

    case CABIN_CLASS:
      if (value == null) {
        unsetCabinClass();
      } else {
        setCabinClass((String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((String)value);
      }
      break;

    case SEAT_LEFT:
      if (value == null) {
        unsetSeatLeft();
      } else {
        setSeatLeft((String)value);
      }
      break;

    case MARKET_AIRLINES:
      if (value == null) {
        unsetMarketAirlines();
      } else {
        setMarketAirlines((String)value);
      }
      break;

    case FARE_PRICE:
      if (value == null) {
        unsetFarePrice();
      } else {
        setFarePrice((Integer)value);
      }
      break;

    case OPERATOR_AIRLINES:
      if (value == null) {
        unsetOperatorAirlines();
      } else {
        setOperatorAirlines((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FLIGHT_KEY:
      return getFlightKey();

    case CARRIER:
      return getCarrier();

    case FLIGHT_NUMBER:
      return getFlightNumber();

    case FROM_CITY:
      return getFromCity();

    case FROM_AIRPORT:
      return getFromAirport();

    case FROM_DATE:
      return getFromDate();

    case FROM_TIME:
      return getFromTime();

    case TO_CITY:
      return getToCity();

    case TO_AIRPORT:
      return getToAirport();

    case TO_DATE:
      return getToDate();

    case TO_TIME:
      return getToTime();

    case ALL_CABIN_INFO:
      return getAllCabinInfo();

    case GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST:
      return getGalileoShoppingFlightStopOverList();

    case CODE_SHARE:
      return getCodeShare();

    case BOOKING_CLASS:
      return getBookingClass();

    case EQUIP_TYPE:
      return getEquipType();

    case CABIN_CLASS:
      return getCabinClass();

    case DURATION:
      return getDuration();

    case SEAT_LEFT:
      return getSeatLeft();

    case MARKET_AIRLINES:
      return getMarketAirlines();

    case FARE_PRICE:
      return Integer.valueOf(getFarePrice());

    case OPERATOR_AIRLINES:
      return getOperatorAirlines();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FLIGHT_KEY:
      return isSetFlightKey();
    case CARRIER:
      return isSetCarrier();
    case FLIGHT_NUMBER:
      return isSetFlightNumber();
    case FROM_CITY:
      return isSetFromCity();
    case FROM_AIRPORT:
      return isSetFromAirport();
    case FROM_DATE:
      return isSetFromDate();
    case FROM_TIME:
      return isSetFromTime();
    case TO_CITY:
      return isSetToCity();
    case TO_AIRPORT:
      return isSetToAirport();
    case TO_DATE:
      return isSetToDate();
    case TO_TIME:
      return isSetToTime();
    case ALL_CABIN_INFO:
      return isSetAllCabinInfo();
    case GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST:
      return isSetGalileoShoppingFlightStopOverList();
    case CODE_SHARE:
      return isSetCodeShare();
    case BOOKING_CLASS:
      return isSetBookingClass();
    case EQUIP_TYPE:
      return isSetEquipType();
    case CABIN_CLASS:
      return isSetCabinClass();
    case DURATION:
      return isSetDuration();
    case SEAT_LEFT:
      return isSetSeatLeft();
    case MARKET_AIRLINES:
      return isSetMarketAirlines();
    case FARE_PRICE:
      return isSetFarePrice();
    case OPERATOR_AIRLINES:
      return isSetOperatorAirlines();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GalileoShoppingFlight)
      return this.equals((GalileoShoppingFlight)that);
    return false;
  }

  public boolean equals(GalileoShoppingFlight that) {
    if (that == null)
      return false;

    boolean this_present_flightKey = true && this.isSetFlightKey();
    boolean that_present_flightKey = true && that.isSetFlightKey();
    if (this_present_flightKey || that_present_flightKey) {
      if (!(this_present_flightKey && that_present_flightKey))
        return false;
      if (!this.flightKey.equals(that.flightKey))
        return false;
    }

    boolean this_present_carrier = true && this.isSetCarrier();
    boolean that_present_carrier = true && that.isSetCarrier();
    if (this_present_carrier || that_present_carrier) {
      if (!(this_present_carrier && that_present_carrier))
        return false;
      if (!this.carrier.equals(that.carrier))
        return false;
    }

    boolean this_present_flightNumber = true && this.isSetFlightNumber();
    boolean that_present_flightNumber = true && that.isSetFlightNumber();
    if (this_present_flightNumber || that_present_flightNumber) {
      if (!(this_present_flightNumber && that_present_flightNumber))
        return false;
      if (!this.flightNumber.equals(that.flightNumber))
        return false;
    }

    boolean this_present_fromCity = true && this.isSetFromCity();
    boolean that_present_fromCity = true && that.isSetFromCity();
    if (this_present_fromCity || that_present_fromCity) {
      if (!(this_present_fromCity && that_present_fromCity))
        return false;
      if (!this.fromCity.equals(that.fromCity))
        return false;
    }

    boolean this_present_fromAirport = true && this.isSetFromAirport();
    boolean that_present_fromAirport = true && that.isSetFromAirport();
    if (this_present_fromAirport || that_present_fromAirport) {
      if (!(this_present_fromAirport && that_present_fromAirport))
        return false;
      if (!this.fromAirport.equals(that.fromAirport))
        return false;
    }

    boolean this_present_fromDate = true && this.isSetFromDate();
    boolean that_present_fromDate = true && that.isSetFromDate();
    if (this_present_fromDate || that_present_fromDate) {
      if (!(this_present_fromDate && that_present_fromDate))
        return false;
      if (!this.fromDate.equals(that.fromDate))
        return false;
    }

    boolean this_present_fromTime = true && this.isSetFromTime();
    boolean that_present_fromTime = true && that.isSetFromTime();
    if (this_present_fromTime || that_present_fromTime) {
      if (!(this_present_fromTime && that_present_fromTime))
        return false;
      if (!this.fromTime.equals(that.fromTime))
        return false;
    }

    boolean this_present_toCity = true && this.isSetToCity();
    boolean that_present_toCity = true && that.isSetToCity();
    if (this_present_toCity || that_present_toCity) {
      if (!(this_present_toCity && that_present_toCity))
        return false;
      if (!this.toCity.equals(that.toCity))
        return false;
    }

    boolean this_present_toAirport = true && this.isSetToAirport();
    boolean that_present_toAirport = true && that.isSetToAirport();
    if (this_present_toAirport || that_present_toAirport) {
      if (!(this_present_toAirport && that_present_toAirport))
        return false;
      if (!this.toAirport.equals(that.toAirport))
        return false;
    }

    boolean this_present_toDate = true && this.isSetToDate();
    boolean that_present_toDate = true && that.isSetToDate();
    if (this_present_toDate || that_present_toDate) {
      if (!(this_present_toDate && that_present_toDate))
        return false;
      if (!this.toDate.equals(that.toDate))
        return false;
    }

    boolean this_present_toTime = true && this.isSetToTime();
    boolean that_present_toTime = true && that.isSetToTime();
    if (this_present_toTime || that_present_toTime) {
      if (!(this_present_toTime && that_present_toTime))
        return false;
      if (!this.toTime.equals(that.toTime))
        return false;
    }

    boolean this_present_allCabinInfo = true && this.isSetAllCabinInfo();
    boolean that_present_allCabinInfo = true && that.isSetAllCabinInfo();
    if (this_present_allCabinInfo || that_present_allCabinInfo) {
      if (!(this_present_allCabinInfo && that_present_allCabinInfo))
        return false;
      if (!this.allCabinInfo.equals(that.allCabinInfo))
        return false;
    }

    boolean this_present_galileoShoppingFlightStopOverList = true && this.isSetGalileoShoppingFlightStopOverList();
    boolean that_present_galileoShoppingFlightStopOverList = true && that.isSetGalileoShoppingFlightStopOverList();
    if (this_present_galileoShoppingFlightStopOverList || that_present_galileoShoppingFlightStopOverList) {
      if (!(this_present_galileoShoppingFlightStopOverList && that_present_galileoShoppingFlightStopOverList))
        return false;
      if (!this.galileoShoppingFlightStopOverList.equals(that.galileoShoppingFlightStopOverList))
        return false;
    }

    boolean this_present_codeShare = true && this.isSetCodeShare();
    boolean that_present_codeShare = true && that.isSetCodeShare();
    if (this_present_codeShare || that_present_codeShare) {
      if (!(this_present_codeShare && that_present_codeShare))
        return false;
      if (!this.codeShare.equals(that.codeShare))
        return false;
    }

    boolean this_present_bookingClass = true && this.isSetBookingClass();
    boolean that_present_bookingClass = true && that.isSetBookingClass();
    if (this_present_bookingClass || that_present_bookingClass) {
      if (!(this_present_bookingClass && that_present_bookingClass))
        return false;
      if (!this.bookingClass.equals(that.bookingClass))
        return false;
    }

    boolean this_present_equipType = true && this.isSetEquipType();
    boolean that_present_equipType = true && that.isSetEquipType();
    if (this_present_equipType || that_present_equipType) {
      if (!(this_present_equipType && that_present_equipType))
        return false;
      if (!this.equipType.equals(that.equipType))
        return false;
    }

    boolean this_present_cabinClass = true && this.isSetCabinClass();
    boolean that_present_cabinClass = true && that.isSetCabinClass();
    if (this_present_cabinClass || that_present_cabinClass) {
      if (!(this_present_cabinClass && that_present_cabinClass))
        return false;
      if (!this.cabinClass.equals(that.cabinClass))
        return false;
    }

    boolean this_present_duration = true && this.isSetDuration();
    boolean that_present_duration = true && that.isSetDuration();
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (!this.duration.equals(that.duration))
        return false;
    }

    boolean this_present_seatLeft = true && this.isSetSeatLeft();
    boolean that_present_seatLeft = true && that.isSetSeatLeft();
    if (this_present_seatLeft || that_present_seatLeft) {
      if (!(this_present_seatLeft && that_present_seatLeft))
        return false;
      if (!this.seatLeft.equals(that.seatLeft))
        return false;
    }

    boolean this_present_marketAirlines = true && this.isSetMarketAirlines();
    boolean that_present_marketAirlines = true && that.isSetMarketAirlines();
    if (this_present_marketAirlines || that_present_marketAirlines) {
      if (!(this_present_marketAirlines && that_present_marketAirlines))
        return false;
      if (!this.marketAirlines.equals(that.marketAirlines))
        return false;
    }

    boolean this_present_farePrice = true && this.isSetFarePrice();
    boolean that_present_farePrice = true && that.isSetFarePrice();
    if (this_present_farePrice || that_present_farePrice) {
      if (!(this_present_farePrice && that_present_farePrice))
        return false;
      if (this.farePrice != that.farePrice)
        return false;
    }

    boolean this_present_operatorAirlines = true && this.isSetOperatorAirlines();
    boolean that_present_operatorAirlines = true && that.isSetOperatorAirlines();
    if (this_present_operatorAirlines || that_present_operatorAirlines) {
      if (!(this_present_operatorAirlines && that_present_operatorAirlines))
        return false;
      if (!this.operatorAirlines.equals(that.operatorAirlines))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GalileoShoppingFlight other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GalileoShoppingFlight typedOther = (GalileoShoppingFlight)other;

    lastComparison = Boolean.valueOf(isSetFlightKey()).compareTo(typedOther.isSetFlightKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightKey, typedOther.flightKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarrier()).compareTo(typedOther.isSetCarrier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarrier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrier, typedOther.carrier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightNumber()).compareTo(typedOther.isSetFlightNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightNumber, typedOther.flightNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromCity()).compareTo(typedOther.isSetFromCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromCity, typedOther.fromCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromAirport()).compareTo(typedOther.isSetFromAirport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromAirport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromAirport, typedOther.fromAirport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromTime()).compareTo(typedOther.isSetFromTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTime, typedOther.fromTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToCity()).compareTo(typedOther.isSetToCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toCity, typedOther.toCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToAirport()).compareTo(typedOther.isSetToAirport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToAirport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toAirport, typedOther.toAirport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToTime()).compareTo(typedOther.isSetToTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTime, typedOther.toTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllCabinInfo()).compareTo(typedOther.isSetAllCabinInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllCabinInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allCabinInfo, typedOther.allCabinInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGalileoShoppingFlightStopOverList()).compareTo(typedOther.isSetGalileoShoppingFlightStopOverList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGalileoShoppingFlightStopOverList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.galileoShoppingFlightStopOverList, typedOther.galileoShoppingFlightStopOverList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCodeShare()).compareTo(typedOther.isSetCodeShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodeShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codeShare, typedOther.codeShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookingClass()).compareTo(typedOther.isSetBookingClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingClass, typedOther.bookingClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEquipType()).compareTo(typedOther.isSetEquipType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEquipType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.equipType, typedOther.equipType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCabinClass()).compareTo(typedOther.isSetCabinClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCabinClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cabinClass, typedOther.cabinClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatLeft()).compareTo(typedOther.isSetSeatLeft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatLeft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatLeft, typedOther.seatLeft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketAirlines()).compareTo(typedOther.isSetMarketAirlines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketAirlines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketAirlines, typedOther.marketAirlines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFarePrice()).compareTo(typedOther.isSetFarePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFarePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.farePrice, typedOther.farePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorAirlines()).compareTo(typedOther.isSetOperatorAirlines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorAirlines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorAirlines, typedOther.operatorAirlines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GalileoShoppingFlight(");
    boolean first = true;

    if (isSetFlightKey()) {
      sb.append("flightKey:");
      if (this.flightKey == null) {
        sb.append("null");
      } else {
        sb.append(this.flightKey);
      }
      first = false;
    }
    if (isSetCarrier()) {
      if (!first) sb.append(", ");
      sb.append("carrier:");
      if (this.carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.carrier);
      }
      first = false;
    }
    if (isSetFlightNumber()) {
      if (!first) sb.append(", ");
      sb.append("flightNumber:");
      if (this.flightNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.flightNumber);
      }
      first = false;
    }
    if (isSetFromCity()) {
      if (!first) sb.append(", ");
      sb.append("fromCity:");
      if (this.fromCity == null) {
        sb.append("null");
      } else {
        sb.append(this.fromCity);
      }
      first = false;
    }
    if (isSetFromAirport()) {
      if (!first) sb.append(", ");
      sb.append("fromAirport:");
      if (this.fromAirport == null) {
        sb.append("null");
      } else {
        sb.append(this.fromAirport);
      }
      first = false;
    }
    if (isSetFromDate()) {
      if (!first) sb.append(", ");
      sb.append("fromDate:");
      if (this.fromDate == null) {
        sb.append("null");
      } else {
        sb.append(this.fromDate);
      }
      first = false;
    }
    if (isSetFromTime()) {
      if (!first) sb.append(", ");
      sb.append("fromTime:");
      if (this.fromTime == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTime);
      }
      first = false;
    }
    if (isSetToCity()) {
      if (!first) sb.append(", ");
      sb.append("toCity:");
      if (this.toCity == null) {
        sb.append("null");
      } else {
        sb.append(this.toCity);
      }
      first = false;
    }
    if (isSetToAirport()) {
      if (!first) sb.append(", ");
      sb.append("toAirport:");
      if (this.toAirport == null) {
        sb.append("null");
      } else {
        sb.append(this.toAirport);
      }
      first = false;
    }
    if (isSetToDate()) {
      if (!first) sb.append(", ");
      sb.append("toDate:");
      if (this.toDate == null) {
        sb.append("null");
      } else {
        sb.append(this.toDate);
      }
      first = false;
    }
    if (isSetToTime()) {
      if (!first) sb.append(", ");
      sb.append("toTime:");
      if (this.toTime == null) {
        sb.append("null");
      } else {
        sb.append(this.toTime);
      }
      first = false;
    }
    if (isSetAllCabinInfo()) {
      if (!first) sb.append(", ");
      sb.append("allCabinInfo:");
      if (this.allCabinInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.allCabinInfo);
      }
      first = false;
    }
    if (isSetGalileoShoppingFlightStopOverList()) {
      if (!first) sb.append(", ");
      sb.append("galileoShoppingFlightStopOverList:");
      if (this.galileoShoppingFlightStopOverList == null) {
        sb.append("null");
      } else {
        sb.append(this.galileoShoppingFlightStopOverList);
      }
      first = false;
    }
    if (isSetCodeShare()) {
      if (!first) sb.append(", ");
      sb.append("codeShare:");
      if (this.codeShare == null) {
        sb.append("null");
      } else {
        sb.append(this.codeShare);
      }
      first = false;
    }
    if (isSetBookingClass()) {
      if (!first) sb.append(", ");
      sb.append("bookingClass:");
      if (this.bookingClass == null) {
        sb.append("null");
      } else {
        sb.append(this.bookingClass);
      }
      first = false;
    }
    if (isSetEquipType()) {
      if (!first) sb.append(", ");
      sb.append("equipType:");
      if (this.equipType == null) {
        sb.append("null");
      } else {
        sb.append(this.equipType);
      }
      first = false;
    }
    if (isSetCabinClass()) {
      if (!first) sb.append(", ");
      sb.append("cabinClass:");
      if (this.cabinClass == null) {
        sb.append("null");
      } else {
        sb.append(this.cabinClass);
      }
      first = false;
    }
    if (isSetDuration()) {
      if (!first) sb.append(", ");
      sb.append("duration:");
      if (this.duration == null) {
        sb.append("null");
      } else {
        sb.append(this.duration);
      }
      first = false;
    }
    if (isSetSeatLeft()) {
      if (!first) sb.append(", ");
      sb.append("seatLeft:");
      if (this.seatLeft == null) {
        sb.append("null");
      } else {
        sb.append(this.seatLeft);
      }
      first = false;
    }
    if (isSetMarketAirlines()) {
      if (!first) sb.append(", ");
      sb.append("marketAirlines:");
      if (this.marketAirlines == null) {
        sb.append("null");
      } else {
        sb.append(this.marketAirlines);
      }
      first = false;
    }
    if (isSetFarePrice()) {
      if (!first) sb.append(", ");
      sb.append("farePrice:");
      sb.append(this.farePrice);
      first = false;
    }
    if (isSetOperatorAirlines()) {
      if (!first) sb.append(", ");
      sb.append("operatorAirlines:");
      if (this.operatorAirlines == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorAirlines);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GalileoShoppingFlightStandardSchemeFactory implements SchemeFactory {
    public GalileoShoppingFlightStandardScheme getScheme() {
      return new GalileoShoppingFlightStandardScheme();
    }
  }

  private static class GalileoShoppingFlightStandardScheme extends StandardScheme<GalileoShoppingFlight> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GalileoShoppingFlight struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FLIGHT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flightKey = iprot.readString();
              struct.setFlightKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CARRIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carrier = iprot.readString();
              struct.setCarrierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FLIGHT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flightNumber = iprot.readString();
              struct.setFlightNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FROM_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromCity = iprot.readString();
              struct.setFromCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FROM_AIRPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromAirport = iprot.readString();
              struct.setFromAirportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // FROM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromDate = iprot.readString();
              struct.setFromDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // FROM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromTime = iprot.readString();
              struct.setFromTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TO_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toCity = iprot.readString();
              struct.setToCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TO_AIRPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toAirport = iprot.readString();
              struct.setToAirportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // TO_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toDate = iprot.readString();
              struct.setToDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // TO_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toTime = iprot.readString();
              struct.setToTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // ALL_CABIN_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.allCabinInfo = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.allCabinInfo.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setAllCabinInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.galileoShoppingFlightStopOverList = new ArrayList<GalileoShoppingFlightStopOver>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  GalileoShoppingFlightStopOver _elem6; // required
                  _elem6 = new GalileoShoppingFlightStopOver();
                  _elem6.read(iprot);
                  struct.galileoShoppingFlightStopOverList.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setGalileoShoppingFlightStopOverListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // CODE_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.codeShare = iprot.readString();
              struct.setCodeShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // BOOKING_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bookingClass = iprot.readString();
              struct.setBookingClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // EQUIP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.equipType = iprot.readString();
              struct.setEquipTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CABIN_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cabinClass = iprot.readString();
              struct.setCabinClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.duration = iprot.readString();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SEAT_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.seatLeft = iprot.readString();
              struct.setSeatLeftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // MARKET_AIRLINES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marketAirlines = iprot.readString();
              struct.setMarketAirlinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // FARE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.farePrice = iprot.readI32();
              struct.setFarePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // OPERATOR_AIRLINES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorAirlines = iprot.readString();
              struct.setOperatorAirlinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GalileoShoppingFlight struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.flightKey != null) {
        if (struct.isSetFlightKey()) {
          oprot.writeFieldBegin(FLIGHT_KEY_FIELD_DESC);
          oprot.writeString(struct.flightKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.carrier != null) {
        if (struct.isSetCarrier()) {
          oprot.writeFieldBegin(CARRIER_FIELD_DESC);
          oprot.writeString(struct.carrier);
          oprot.writeFieldEnd();
        }
      }
      if (struct.flightNumber != null) {
        if (struct.isSetFlightNumber()) {
          oprot.writeFieldBegin(FLIGHT_NUMBER_FIELD_DESC);
          oprot.writeString(struct.flightNumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromCity != null) {
        if (struct.isSetFromCity()) {
          oprot.writeFieldBegin(FROM_CITY_FIELD_DESC);
          oprot.writeString(struct.fromCity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromAirport != null) {
        if (struct.isSetFromAirport()) {
          oprot.writeFieldBegin(FROM_AIRPORT_FIELD_DESC);
          oprot.writeString(struct.fromAirport);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromDate != null) {
        if (struct.isSetFromDate()) {
          oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
          oprot.writeString(struct.fromDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromTime != null) {
        if (struct.isSetFromTime()) {
          oprot.writeFieldBegin(FROM_TIME_FIELD_DESC);
          oprot.writeString(struct.fromTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toCity != null) {
        if (struct.isSetToCity()) {
          oprot.writeFieldBegin(TO_CITY_FIELD_DESC);
          oprot.writeString(struct.toCity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toAirport != null) {
        if (struct.isSetToAirport()) {
          oprot.writeFieldBegin(TO_AIRPORT_FIELD_DESC);
          oprot.writeString(struct.toAirport);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toDate != null) {
        if (struct.isSetToDate()) {
          oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
          oprot.writeString(struct.toDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toTime != null) {
        if (struct.isSetToTime()) {
          oprot.writeFieldBegin(TO_TIME_FIELD_DESC);
          oprot.writeString(struct.toTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.allCabinInfo != null) {
        if (struct.isSetAllCabinInfo()) {
          oprot.writeFieldBegin(ALL_CABIN_INFO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.allCabinInfo.size()));
            for (Map.Entry<String, String> _iter7 : struct.allCabinInfo.entrySet())
            {
              oprot.writeString(_iter7.getKey());
              oprot.writeString(_iter7.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.galileoShoppingFlightStopOverList != null) {
        if (struct.isSetGalileoShoppingFlightStopOverList()) {
          oprot.writeFieldBegin(GALILEO_SHOPPING_FLIGHT_STOP_OVER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.galileoShoppingFlightStopOverList.size()));
            for (GalileoShoppingFlightStopOver _iter8 : struct.galileoShoppingFlightStopOverList)
            {
              _iter8.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.codeShare != null) {
        if (struct.isSetCodeShare()) {
          oprot.writeFieldBegin(CODE_SHARE_FIELD_DESC);
          oprot.writeString(struct.codeShare);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bookingClass != null) {
        if (struct.isSetBookingClass()) {
          oprot.writeFieldBegin(BOOKING_CLASS_FIELD_DESC);
          oprot.writeString(struct.bookingClass);
          oprot.writeFieldEnd();
        }
      }
      if (struct.equipType != null) {
        if (struct.isSetEquipType()) {
          oprot.writeFieldBegin(EQUIP_TYPE_FIELD_DESC);
          oprot.writeString(struct.equipType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cabinClass != null) {
        if (struct.isSetCabinClass()) {
          oprot.writeFieldBegin(CABIN_CLASS_FIELD_DESC);
          oprot.writeString(struct.cabinClass);
          oprot.writeFieldEnd();
        }
      }
      if (struct.duration != null) {
        if (struct.isSetDuration()) {
          oprot.writeFieldBegin(DURATION_FIELD_DESC);
          oprot.writeString(struct.duration);
          oprot.writeFieldEnd();
        }
      }
      if (struct.seatLeft != null) {
        if (struct.isSetSeatLeft()) {
          oprot.writeFieldBegin(SEAT_LEFT_FIELD_DESC);
          oprot.writeString(struct.seatLeft);
          oprot.writeFieldEnd();
        }
      }
      if (struct.marketAirlines != null) {
        if (struct.isSetMarketAirlines()) {
          oprot.writeFieldBegin(MARKET_AIRLINES_FIELD_DESC);
          oprot.writeString(struct.marketAirlines);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFarePrice()) {
        oprot.writeFieldBegin(FARE_PRICE_FIELD_DESC);
        oprot.writeI32(struct.farePrice);
        oprot.writeFieldEnd();
      }
      if (struct.operatorAirlines != null) {
        if (struct.isSetOperatorAirlines()) {
          oprot.writeFieldBegin(OPERATOR_AIRLINES_FIELD_DESC);
          oprot.writeString(struct.operatorAirlines);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GalileoShoppingFlightTupleSchemeFactory implements SchemeFactory {
    public GalileoShoppingFlightTupleScheme getScheme() {
      return new GalileoShoppingFlightTupleScheme();
    }
  }

  private static class GalileoShoppingFlightTupleScheme extends TupleScheme<GalileoShoppingFlight> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GalileoShoppingFlight struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFlightKey()) {
        optionals.set(0);
      }
      if (struct.isSetCarrier()) {
        optionals.set(1);
      }
      if (struct.isSetFlightNumber()) {
        optionals.set(2);
      }
      if (struct.isSetFromCity()) {
        optionals.set(3);
      }
      if (struct.isSetFromAirport()) {
        optionals.set(4);
      }
      if (struct.isSetFromDate()) {
        optionals.set(5);
      }
      if (struct.isSetFromTime()) {
        optionals.set(6);
      }
      if (struct.isSetToCity()) {
        optionals.set(7);
      }
      if (struct.isSetToAirport()) {
        optionals.set(8);
      }
      if (struct.isSetToDate()) {
        optionals.set(9);
      }
      if (struct.isSetToTime()) {
        optionals.set(10);
      }
      if (struct.isSetAllCabinInfo()) {
        optionals.set(11);
      }
      if (struct.isSetGalileoShoppingFlightStopOverList()) {
        optionals.set(12);
      }
      if (struct.isSetCodeShare()) {
        optionals.set(13);
      }
      if (struct.isSetBookingClass()) {
        optionals.set(14);
      }
      if (struct.isSetEquipType()) {
        optionals.set(15);
      }
      if (struct.isSetCabinClass()) {
        optionals.set(16);
      }
      if (struct.isSetDuration()) {
        optionals.set(17);
      }
      if (struct.isSetSeatLeft()) {
        optionals.set(18);
      }
      if (struct.isSetMarketAirlines()) {
        optionals.set(19);
      }
      if (struct.isSetFarePrice()) {
        optionals.set(20);
      }
      if (struct.isSetOperatorAirlines()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetFlightKey()) {
        oprot.writeString(struct.flightKey);
      }
      if (struct.isSetCarrier()) {
        oprot.writeString(struct.carrier);
      }
      if (struct.isSetFlightNumber()) {
        oprot.writeString(struct.flightNumber);
      }
      if (struct.isSetFromCity()) {
        oprot.writeString(struct.fromCity);
      }
      if (struct.isSetFromAirport()) {
        oprot.writeString(struct.fromAirport);
      }
      if (struct.isSetFromDate()) {
        oprot.writeString(struct.fromDate);
      }
      if (struct.isSetFromTime()) {
        oprot.writeString(struct.fromTime);
      }
      if (struct.isSetToCity()) {
        oprot.writeString(struct.toCity);
      }
      if (struct.isSetToAirport()) {
        oprot.writeString(struct.toAirport);
      }
      if (struct.isSetToDate()) {
        oprot.writeString(struct.toDate);
      }
      if (struct.isSetToTime()) {
        oprot.writeString(struct.toTime);
      }
      if (struct.isSetAllCabinInfo()) {
        {
          oprot.writeI32(struct.allCabinInfo.size());
          for (Map.Entry<String, String> _iter9 : struct.allCabinInfo.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeString(_iter9.getValue());
          }
        }
      }
      if (struct.isSetGalileoShoppingFlightStopOverList()) {
        {
          oprot.writeI32(struct.galileoShoppingFlightStopOverList.size());
          for (GalileoShoppingFlightStopOver _iter10 : struct.galileoShoppingFlightStopOverList)
          {
            _iter10.write(oprot);
          }
        }
      }
      if (struct.isSetCodeShare()) {
        oprot.writeString(struct.codeShare);
      }
      if (struct.isSetBookingClass()) {
        oprot.writeString(struct.bookingClass);
      }
      if (struct.isSetEquipType()) {
        oprot.writeString(struct.equipType);
      }
      if (struct.isSetCabinClass()) {
        oprot.writeString(struct.cabinClass);
      }
      if (struct.isSetDuration()) {
        oprot.writeString(struct.duration);
      }
      if (struct.isSetSeatLeft()) {
        oprot.writeString(struct.seatLeft);
      }
      if (struct.isSetMarketAirlines()) {
        oprot.writeString(struct.marketAirlines);
      }
      if (struct.isSetFarePrice()) {
        oprot.writeI32(struct.farePrice);
      }
      if (struct.isSetOperatorAirlines()) {
        oprot.writeString(struct.operatorAirlines);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GalileoShoppingFlight struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.flightKey = iprot.readString();
        struct.setFlightKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.carrier = iprot.readString();
        struct.setCarrierIsSet(true);
      }
      if (incoming.get(2)) {
        struct.flightNumber = iprot.readString();
        struct.setFlightNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromCity = iprot.readString();
        struct.setFromCityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fromAirport = iprot.readString();
        struct.setFromAirportIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fromDate = iprot.readString();
        struct.setFromDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fromTime = iprot.readString();
        struct.setFromTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.toCity = iprot.readString();
        struct.setToCityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.toAirport = iprot.readString();
        struct.setToAirportIsSet(true);
      }
      if (incoming.get(9)) {
        struct.toDate = iprot.readString();
        struct.setToDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.toTime = iprot.readString();
        struct.setToTimeIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.allCabinInfo = new HashMap<String,String>(2*_map11.size);
          for (int _i12 = 0; _i12 < _map11.size; ++_i12)
          {
            String _key13; // required
            String _val14; // required
            _key13 = iprot.readString();
            _val14 = iprot.readString();
            struct.allCabinInfo.put(_key13, _val14);
          }
        }
        struct.setAllCabinInfoIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.galileoShoppingFlightStopOverList = new ArrayList<GalileoShoppingFlightStopOver>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            GalileoShoppingFlightStopOver _elem17; // required
            _elem17 = new GalileoShoppingFlightStopOver();
            _elem17.read(iprot);
            struct.galileoShoppingFlightStopOverList.add(_elem17);
          }
        }
        struct.setGalileoShoppingFlightStopOverListIsSet(true);
      }
      if (incoming.get(13)) {
        struct.codeShare = iprot.readString();
        struct.setCodeShareIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bookingClass = iprot.readString();
        struct.setBookingClassIsSet(true);
      }
      if (incoming.get(15)) {
        struct.equipType = iprot.readString();
        struct.setEquipTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.cabinClass = iprot.readString();
        struct.setCabinClassIsSet(true);
      }
      if (incoming.get(17)) {
        struct.duration = iprot.readString();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(18)) {
        struct.seatLeft = iprot.readString();
        struct.setSeatLeftIsSet(true);
      }
      if (incoming.get(19)) {
        struct.marketAirlines = iprot.readString();
        struct.setMarketAirlinesIsSet(true);
      }
      if (incoming.get(20)) {
        struct.farePrice = iprot.readI32();
        struct.setFarePriceIsSet(true);
      }
      if (incoming.get(21)) {
        struct.operatorAirlines = iprot.readString();
        struct.setOperatorAirlinesIsSet(true);
      }
    }
  }

}

