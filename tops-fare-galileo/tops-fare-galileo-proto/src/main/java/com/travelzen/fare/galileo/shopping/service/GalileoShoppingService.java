/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.fare.galileo.shopping.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GalileoShoppingService {

  public interface Iface {

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse galileoFareSearch(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException;

    public com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute galileoGetRouteFromDB(String id) throws org.apache.thrift.TException;

    public List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> galileoGetRouteFromDBByRouteKey(String routeKey) throws org.apache.thrift.TException;

    public com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule galileoGetFareRule(String GalileoShoppingFareRuleRequest) throws org.apache.thrift.TException;

    public boolean refreshCacheByRouteKey(String routeKey, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException;

    public boolean refreshCacheByRouteId(long routeId, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void galileoFareSearch(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.galileoFareSearch_call> resultHandler) throws org.apache.thrift.TException;

    public void galileoGetRouteFromDB(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.galileoGetRouteFromDB_call> resultHandler) throws org.apache.thrift.TException;

    public void galileoGetRouteFromDBByRouteKey(String routeKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.galileoGetRouteFromDBByRouteKey_call> resultHandler) throws org.apache.thrift.TException;

    public void galileoGetFareRule(String GalileoShoppingFareRuleRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.galileoGetFareRule_call> resultHandler) throws org.apache.thrift.TException;

    public void refreshCacheByRouteKey(String routeKey, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.refreshCacheByRouteKey_call> resultHandler) throws org.apache.thrift.TException;

    public void refreshCacheByRouteId(long routeId, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.refreshCacheByRouteId_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse galileoFareSearch(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException
    {
      send_galileoFareSearch(request);
      return recv_galileoFareSearch();
    }

    public void send_galileoFareSearch(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException
    {
      galileoFareSearch_args args = new galileoFareSearch_args();
      args.setRequest(request);
      sendBase("galileoFareSearch", args);
    }

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse recv_galileoFareSearch() throws org.apache.thrift.TException
    {
      galileoFareSearch_result result = new galileoFareSearch_result();
      receiveBase(result, "galileoFareSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "galileoFareSearch failed: unknown result");
    }

    public com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute galileoGetRouteFromDB(String id) throws org.apache.thrift.TException
    {
      send_galileoGetRouteFromDB(id);
      return recv_galileoGetRouteFromDB();
    }

    public void send_galileoGetRouteFromDB(String id) throws org.apache.thrift.TException
    {
      galileoGetRouteFromDB_args args = new galileoGetRouteFromDB_args();
      args.setId(id);
      sendBase("galileoGetRouteFromDB", args);
    }

    public com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute recv_galileoGetRouteFromDB() throws org.apache.thrift.TException
    {
      galileoGetRouteFromDB_result result = new galileoGetRouteFromDB_result();
      receiveBase(result, "galileoGetRouteFromDB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "galileoGetRouteFromDB failed: unknown result");
    }

    public List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> galileoGetRouteFromDBByRouteKey(String routeKey) throws org.apache.thrift.TException
    {
      send_galileoGetRouteFromDBByRouteKey(routeKey);
      return recv_galileoGetRouteFromDBByRouteKey();
    }

    public void send_galileoGetRouteFromDBByRouteKey(String routeKey) throws org.apache.thrift.TException
    {
      galileoGetRouteFromDBByRouteKey_args args = new galileoGetRouteFromDBByRouteKey_args();
      args.setRouteKey(routeKey);
      sendBase("galileoGetRouteFromDBByRouteKey", args);
    }

    public List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> recv_galileoGetRouteFromDBByRouteKey() throws org.apache.thrift.TException
    {
      galileoGetRouteFromDBByRouteKey_result result = new galileoGetRouteFromDBByRouteKey_result();
      receiveBase(result, "galileoGetRouteFromDBByRouteKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "galileoGetRouteFromDBByRouteKey failed: unknown result");
    }

    public com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule galileoGetFareRule(String GalileoShoppingFareRuleRequest) throws org.apache.thrift.TException
    {
      send_galileoGetFareRule(GalileoShoppingFareRuleRequest);
      return recv_galileoGetFareRule();
    }

    public void send_galileoGetFareRule(String GalileoShoppingFareRuleRequest) throws org.apache.thrift.TException
    {
      galileoGetFareRule_args args = new galileoGetFareRule_args();
      args.setGalileoShoppingFareRuleRequest(GalileoShoppingFareRuleRequest);
      sendBase("galileoGetFareRule", args);
    }

    public com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule recv_galileoGetFareRule() throws org.apache.thrift.TException
    {
      galileoGetFareRule_result result = new galileoGetFareRule_result();
      receiveBase(result, "galileoGetFareRule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "galileoGetFareRule failed: unknown result");
    }

    public boolean refreshCacheByRouteKey(String routeKey, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException
    {
      send_refreshCacheByRouteKey(routeKey, request);
      return recv_refreshCacheByRouteKey();
    }

    public void send_refreshCacheByRouteKey(String routeKey, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException
    {
      refreshCacheByRouteKey_args args = new refreshCacheByRouteKey_args();
      args.setRouteKey(routeKey);
      args.setRequest(request);
      sendBase("refreshCacheByRouteKey", args);
    }

    public boolean recv_refreshCacheByRouteKey() throws org.apache.thrift.TException
    {
      refreshCacheByRouteKey_result result = new refreshCacheByRouteKey_result();
      receiveBase(result, "refreshCacheByRouteKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refreshCacheByRouteKey failed: unknown result");
    }

    public boolean refreshCacheByRouteId(long routeId, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException
    {
      send_refreshCacheByRouteId(routeId, request);
      return recv_refreshCacheByRouteId();
    }

    public void send_refreshCacheByRouteId(long routeId, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) throws org.apache.thrift.TException
    {
      refreshCacheByRouteId_args args = new refreshCacheByRouteId_args();
      args.setRouteId(routeId);
      args.setRequest(request);
      sendBase("refreshCacheByRouteId", args);
    }

    public boolean recv_refreshCacheByRouteId() throws org.apache.thrift.TException
    {
      refreshCacheByRouteId_result result = new refreshCacheByRouteId_result();
      receiveBase(result, "refreshCacheByRouteId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refreshCacheByRouteId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void galileoFareSearch(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<galileoFareSearch_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      galileoFareSearch_call method_call = new galileoFareSearch_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class galileoFareSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request;
      public galileoFareSearch_call(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<galileoFareSearch_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("galileoFareSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        galileoFareSearch_args args = new galileoFareSearch_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_galileoFareSearch();
      }
    }

    public void galileoGetRouteFromDB(String id, org.apache.thrift.async.AsyncMethodCallback<galileoGetRouteFromDB_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      galileoGetRouteFromDB_call method_call = new galileoGetRouteFromDB_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class galileoGetRouteFromDB_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public galileoGetRouteFromDB_call(String id, org.apache.thrift.async.AsyncMethodCallback<galileoGetRouteFromDB_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("galileoGetRouteFromDB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        galileoGetRouteFromDB_args args = new galileoGetRouteFromDB_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_galileoGetRouteFromDB();
      }
    }

    public void galileoGetRouteFromDBByRouteKey(String routeKey, org.apache.thrift.async.AsyncMethodCallback<galileoGetRouteFromDBByRouteKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      galileoGetRouteFromDBByRouteKey_call method_call = new galileoGetRouteFromDBByRouteKey_call(routeKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class galileoGetRouteFromDBByRouteKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String routeKey;
      public galileoGetRouteFromDBByRouteKey_call(String routeKey, org.apache.thrift.async.AsyncMethodCallback<galileoGetRouteFromDBByRouteKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.routeKey = routeKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("galileoGetRouteFromDBByRouteKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        galileoGetRouteFromDBByRouteKey_args args = new galileoGetRouteFromDBByRouteKey_args();
        args.setRouteKey(routeKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_galileoGetRouteFromDBByRouteKey();
      }
    }

    public void galileoGetFareRule(String GalileoShoppingFareRuleRequest, org.apache.thrift.async.AsyncMethodCallback<galileoGetFareRule_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      galileoGetFareRule_call method_call = new galileoGetFareRule_call(GalileoShoppingFareRuleRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class galileoGetFareRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String GalileoShoppingFareRuleRequest;
      public galileoGetFareRule_call(String GalileoShoppingFareRuleRequest, org.apache.thrift.async.AsyncMethodCallback<galileoGetFareRule_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.GalileoShoppingFareRuleRequest = GalileoShoppingFareRuleRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("galileoGetFareRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        galileoGetFareRule_args args = new galileoGetFareRule_args();
        args.setGalileoShoppingFareRuleRequest(GalileoShoppingFareRuleRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_galileoGetFareRule();
      }
    }

    public void refreshCacheByRouteKey(String routeKey, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<refreshCacheByRouteKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refreshCacheByRouteKey_call method_call = new refreshCacheByRouteKey_call(routeKey, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refreshCacheByRouteKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String routeKey;
      private com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request;
      public refreshCacheByRouteKey_call(String routeKey, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<refreshCacheByRouteKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.routeKey = routeKey;
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refreshCacheByRouteKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refreshCacheByRouteKey_args args = new refreshCacheByRouteKey_args();
        args.setRouteKey(routeKey);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refreshCacheByRouteKey();
      }
    }

    public void refreshCacheByRouteId(long routeId, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<refreshCacheByRouteId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refreshCacheByRouteId_call method_call = new refreshCacheByRouteId_call(routeId, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refreshCacheByRouteId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long routeId;
      private com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request;
      public refreshCacheByRouteId_call(long routeId, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request, org.apache.thrift.async.AsyncMethodCallback<refreshCacheByRouteId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.routeId = routeId;
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refreshCacheByRouteId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refreshCacheByRouteId_args args = new refreshCacheByRouteId_args();
        args.setRouteId(routeId);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refreshCacheByRouteId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("galileoFareSearch", new galileoFareSearch());
      processMap.put("galileoGetRouteFromDB", new galileoGetRouteFromDB());
      processMap.put("galileoGetRouteFromDBByRouteKey", new galileoGetRouteFromDBByRouteKey());
      processMap.put("galileoGetFareRule", new galileoGetFareRule());
      processMap.put("refreshCacheByRouteKey", new refreshCacheByRouteKey());
      processMap.put("refreshCacheByRouteId", new refreshCacheByRouteId());
      return processMap;
    }

    public static class galileoFareSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, galileoFareSearch_args> {
      public galileoFareSearch() {
        super("galileoFareSearch");
      }

      public galileoFareSearch_args getEmptyArgsInstance() {
        return new galileoFareSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public galileoFareSearch_result getResult(I iface, galileoFareSearch_args args) throws org.apache.thrift.TException {
        galileoFareSearch_result result = new galileoFareSearch_result();
        result.success = iface.galileoFareSearch(args.request);
        return result;
      }
    }

    public static class galileoGetRouteFromDB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, galileoGetRouteFromDB_args> {
      public galileoGetRouteFromDB() {
        super("galileoGetRouteFromDB");
      }

      public galileoGetRouteFromDB_args getEmptyArgsInstance() {
        return new galileoGetRouteFromDB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public galileoGetRouteFromDB_result getResult(I iface, galileoGetRouteFromDB_args args) throws org.apache.thrift.TException {
        galileoGetRouteFromDB_result result = new galileoGetRouteFromDB_result();
        result.success = iface.galileoGetRouteFromDB(args.id);
        return result;
      }
    }

    public static class galileoGetRouteFromDBByRouteKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, galileoGetRouteFromDBByRouteKey_args> {
      public galileoGetRouteFromDBByRouteKey() {
        super("galileoGetRouteFromDBByRouteKey");
      }

      public galileoGetRouteFromDBByRouteKey_args getEmptyArgsInstance() {
        return new galileoGetRouteFromDBByRouteKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public galileoGetRouteFromDBByRouteKey_result getResult(I iface, galileoGetRouteFromDBByRouteKey_args args) throws org.apache.thrift.TException {
        galileoGetRouteFromDBByRouteKey_result result = new galileoGetRouteFromDBByRouteKey_result();
        result.success = iface.galileoGetRouteFromDBByRouteKey(args.routeKey);
        return result;
      }
    }

    public static class galileoGetFareRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, galileoGetFareRule_args> {
      public galileoGetFareRule() {
        super("galileoGetFareRule");
      }

      public galileoGetFareRule_args getEmptyArgsInstance() {
        return new galileoGetFareRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public galileoGetFareRule_result getResult(I iface, galileoGetFareRule_args args) throws org.apache.thrift.TException {
        galileoGetFareRule_result result = new galileoGetFareRule_result();
        result.success = iface.galileoGetFareRule(args.GalileoShoppingFareRuleRequest);
        return result;
      }
    }

    public static class refreshCacheByRouteKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refreshCacheByRouteKey_args> {
      public refreshCacheByRouteKey() {
        super("refreshCacheByRouteKey");
      }

      public refreshCacheByRouteKey_args getEmptyArgsInstance() {
        return new refreshCacheByRouteKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refreshCacheByRouteKey_result getResult(I iface, refreshCacheByRouteKey_args args) throws org.apache.thrift.TException {
        refreshCacheByRouteKey_result result = new refreshCacheByRouteKey_result();
        result.success = iface.refreshCacheByRouteKey(args.routeKey, args.request);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class refreshCacheByRouteId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refreshCacheByRouteId_args> {
      public refreshCacheByRouteId() {
        super("refreshCacheByRouteId");
      }

      public refreshCacheByRouteId_args getEmptyArgsInstance() {
        return new refreshCacheByRouteId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refreshCacheByRouteId_result getResult(I iface, refreshCacheByRouteId_args args) throws org.apache.thrift.TException {
        refreshCacheByRouteId_result result = new refreshCacheByRouteId_result();
        result.success = iface.refreshCacheByRouteId(args.routeId, args.request);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class galileoFareSearch_args implements org.apache.thrift.TBase<galileoFareSearch_args, galileoFareSearch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("galileoFareSearch_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new galileoFareSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new galileoFareSearch_argsTupleSchemeFactory());
    }

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(galileoFareSearch_args.class, metaDataMap);
    }

    public galileoFareSearch_args() {
    }

    public galileoFareSearch_args(
      com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public galileoFareSearch_args(galileoFareSearch_args other) {
      if (other.isSetRequest()) {
        this.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest(other.request);
      }
    }

    public galileoFareSearch_args deepCopy() {
      return new galileoFareSearch_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest getRequest() {
      return this.request;
    }

    public galileoFareSearch_args setRequest(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof galileoFareSearch_args)
        return this.equals((galileoFareSearch_args)that);
      return false;
    }

    public boolean equals(galileoFareSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(galileoFareSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      galileoFareSearch_args typedOther = (galileoFareSearch_args)other;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("galileoFareSearch_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class galileoFareSearch_argsStandardSchemeFactory implements SchemeFactory {
      public galileoFareSearch_argsStandardScheme getScheme() {
        return new galileoFareSearch_argsStandardScheme();
      }
    }

    private static class galileoFareSearch_argsStandardScheme extends StandardScheme<galileoFareSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, galileoFareSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, galileoFareSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class galileoFareSearch_argsTupleSchemeFactory implements SchemeFactory {
      public galileoFareSearch_argsTupleScheme getScheme() {
        return new galileoFareSearch_argsTupleScheme();
      }
    }

    private static class galileoFareSearch_argsTupleScheme extends TupleScheme<galileoFareSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, galileoFareSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, galileoFareSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class galileoFareSearch_result implements org.apache.thrift.TBase<galileoFareSearch_result, galileoFareSearch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("galileoFareSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new galileoFareSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new galileoFareSearch_resultTupleSchemeFactory());
    }

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(galileoFareSearch_result.class, metaDataMap);
    }

    public galileoFareSearch_result() {
    }

    public galileoFareSearch_result(
      com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public galileoFareSearch_result(galileoFareSearch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse(other.success);
      }
    }

    public galileoFareSearch_result deepCopy() {
      return new galileoFareSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse getSuccess() {
      return this.success;
    }

    public galileoFareSearch_result setSuccess(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof galileoFareSearch_result)
        return this.equals((galileoFareSearch_result)that);
      return false;
    }

    public boolean equals(galileoFareSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(galileoFareSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      galileoFareSearch_result typedOther = (galileoFareSearch_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("galileoFareSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class galileoFareSearch_resultStandardSchemeFactory implements SchemeFactory {
      public galileoFareSearch_resultStandardScheme getScheme() {
        return new galileoFareSearch_resultStandardScheme();
      }
    }

    private static class galileoFareSearch_resultStandardScheme extends StandardScheme<galileoFareSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, galileoFareSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, galileoFareSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class galileoFareSearch_resultTupleSchemeFactory implements SchemeFactory {
      public galileoFareSearch_resultTupleScheme getScheme() {
        return new galileoFareSearch_resultTupleScheme();
      }
    }

    private static class galileoFareSearch_resultTupleScheme extends TupleScheme<galileoFareSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, galileoFareSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, galileoFareSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class galileoGetRouteFromDB_args implements org.apache.thrift.TBase<galileoGetRouteFromDB_args, galileoGetRouteFromDB_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("galileoGetRouteFromDB_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new galileoGetRouteFromDB_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new galileoGetRouteFromDB_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(galileoGetRouteFromDB_args.class, metaDataMap);
    }

    public galileoGetRouteFromDB_args() {
    }

    public galileoGetRouteFromDB_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public galileoGetRouteFromDB_args(galileoGetRouteFromDB_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public galileoGetRouteFromDB_args deepCopy() {
      return new galileoGetRouteFromDB_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public galileoGetRouteFromDB_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof galileoGetRouteFromDB_args)
        return this.equals((galileoGetRouteFromDB_args)that);
      return false;
    }

    public boolean equals(galileoGetRouteFromDB_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(galileoGetRouteFromDB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      galileoGetRouteFromDB_args typedOther = (galileoGetRouteFromDB_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("galileoGetRouteFromDB_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class galileoGetRouteFromDB_argsStandardSchemeFactory implements SchemeFactory {
      public galileoGetRouteFromDB_argsStandardScheme getScheme() {
        return new galileoGetRouteFromDB_argsStandardScheme();
      }
    }

    private static class galileoGetRouteFromDB_argsStandardScheme extends StandardScheme<galileoGetRouteFromDB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, galileoGetRouteFromDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, galileoGetRouteFromDB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class galileoGetRouteFromDB_argsTupleSchemeFactory implements SchemeFactory {
      public galileoGetRouteFromDB_argsTupleScheme getScheme() {
        return new galileoGetRouteFromDB_argsTupleScheme();
      }
    }

    private static class galileoGetRouteFromDB_argsTupleScheme extends TupleScheme<galileoGetRouteFromDB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, galileoGetRouteFromDB_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, galileoGetRouteFromDB_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class galileoGetRouteFromDB_result implements org.apache.thrift.TBase<galileoGetRouteFromDB_result, galileoGetRouteFromDB_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("galileoGetRouteFromDB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new galileoGetRouteFromDB_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new galileoGetRouteFromDB_resultTupleSchemeFactory());
    }

    public com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(galileoGetRouteFromDB_result.class, metaDataMap);
    }

    public galileoGetRouteFromDB_result() {
    }

    public galileoGetRouteFromDB_result(
      com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public galileoGetRouteFromDB_result(galileoGetRouteFromDB_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute(other.success);
      }
    }

    public galileoGetRouteFromDB_result deepCopy() {
      return new galileoGetRouteFromDB_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute getSuccess() {
      return this.success;
    }

    public galileoGetRouteFromDB_result setSuccess(com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof galileoGetRouteFromDB_result)
        return this.equals((galileoGetRouteFromDB_result)that);
      return false;
    }

    public boolean equals(galileoGetRouteFromDB_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(galileoGetRouteFromDB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      galileoGetRouteFromDB_result typedOther = (galileoGetRouteFromDB_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("galileoGetRouteFromDB_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class galileoGetRouteFromDB_resultStandardSchemeFactory implements SchemeFactory {
      public galileoGetRouteFromDB_resultStandardScheme getScheme() {
        return new galileoGetRouteFromDB_resultStandardScheme();
      }
    }

    private static class galileoGetRouteFromDB_resultStandardScheme extends StandardScheme<galileoGetRouteFromDB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, galileoGetRouteFromDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, galileoGetRouteFromDB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class galileoGetRouteFromDB_resultTupleSchemeFactory implements SchemeFactory {
      public galileoGetRouteFromDB_resultTupleScheme getScheme() {
        return new galileoGetRouteFromDB_resultTupleScheme();
      }
    }

    private static class galileoGetRouteFromDB_resultTupleScheme extends TupleScheme<galileoGetRouteFromDB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, galileoGetRouteFromDB_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, galileoGetRouteFromDB_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class galileoGetRouteFromDBByRouteKey_args implements org.apache.thrift.TBase<galileoGetRouteFromDBByRouteKey_args, galileoGetRouteFromDBByRouteKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("galileoGetRouteFromDBByRouteKey_args");

    private static final org.apache.thrift.protocol.TField ROUTE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("routeKey", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new galileoGetRouteFromDBByRouteKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new galileoGetRouteFromDBByRouteKey_argsTupleSchemeFactory());
    }

    public String routeKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUTE_KEY((short)1, "routeKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUTE_KEY
            return ROUTE_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUTE_KEY, new org.apache.thrift.meta_data.FieldMetaData("routeKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(galileoGetRouteFromDBByRouteKey_args.class, metaDataMap);
    }

    public galileoGetRouteFromDBByRouteKey_args() {
    }

    public galileoGetRouteFromDBByRouteKey_args(
      String routeKey)
    {
      this();
      this.routeKey = routeKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public galileoGetRouteFromDBByRouteKey_args(galileoGetRouteFromDBByRouteKey_args other) {
      if (other.isSetRouteKey()) {
        this.routeKey = other.routeKey;
      }
    }

    public galileoGetRouteFromDBByRouteKey_args deepCopy() {
      return new galileoGetRouteFromDBByRouteKey_args(this);
    }

    @Override
    public void clear() {
      this.routeKey = null;
    }

    public String getRouteKey() {
      return this.routeKey;
    }

    public galileoGetRouteFromDBByRouteKey_args setRouteKey(String routeKey) {
      this.routeKey = routeKey;
      return this;
    }

    public void unsetRouteKey() {
      this.routeKey = null;
    }

    /** Returns true if field routeKey is set (has been assigned a value) and false otherwise */
    public boolean isSetRouteKey() {
      return this.routeKey != null;
    }

    public void setRouteKeyIsSet(boolean value) {
      if (!value) {
        this.routeKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROUTE_KEY:
        if (value == null) {
          unsetRouteKey();
        } else {
          setRouteKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUTE_KEY:
        return getRouteKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROUTE_KEY:
        return isSetRouteKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof galileoGetRouteFromDBByRouteKey_args)
        return this.equals((galileoGetRouteFromDBByRouteKey_args)that);
      return false;
    }

    public boolean equals(galileoGetRouteFromDBByRouteKey_args that) {
      if (that == null)
        return false;

      boolean this_present_routeKey = true && this.isSetRouteKey();
      boolean that_present_routeKey = true && that.isSetRouteKey();
      if (this_present_routeKey || that_present_routeKey) {
        if (!(this_present_routeKey && that_present_routeKey))
          return false;
        if (!this.routeKey.equals(that.routeKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(galileoGetRouteFromDBByRouteKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      galileoGetRouteFromDBByRouteKey_args typedOther = (galileoGetRouteFromDBByRouteKey_args)other;

      lastComparison = Boolean.valueOf(isSetRouteKey()).compareTo(typedOther.isSetRouteKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRouteKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeKey, typedOther.routeKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("galileoGetRouteFromDBByRouteKey_args(");
      boolean first = true;

      sb.append("routeKey:");
      if (this.routeKey == null) {
        sb.append("null");
      } else {
        sb.append(this.routeKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class galileoGetRouteFromDBByRouteKey_argsStandardSchemeFactory implements SchemeFactory {
      public galileoGetRouteFromDBByRouteKey_argsStandardScheme getScheme() {
        return new galileoGetRouteFromDBByRouteKey_argsStandardScheme();
      }
    }

    private static class galileoGetRouteFromDBByRouteKey_argsStandardScheme extends StandardScheme<galileoGetRouteFromDBByRouteKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, galileoGetRouteFromDBByRouteKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUTE_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.routeKey = iprot.readString();
                struct.setRouteKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, galileoGetRouteFromDBByRouteKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.routeKey != null) {
          oprot.writeFieldBegin(ROUTE_KEY_FIELD_DESC);
          oprot.writeString(struct.routeKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class galileoGetRouteFromDBByRouteKey_argsTupleSchemeFactory implements SchemeFactory {
      public galileoGetRouteFromDBByRouteKey_argsTupleScheme getScheme() {
        return new galileoGetRouteFromDBByRouteKey_argsTupleScheme();
      }
    }

    private static class galileoGetRouteFromDBByRouteKey_argsTupleScheme extends TupleScheme<galileoGetRouteFromDBByRouteKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, galileoGetRouteFromDBByRouteKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRouteKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRouteKey()) {
          oprot.writeString(struct.routeKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, galileoGetRouteFromDBByRouteKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.routeKey = iprot.readString();
          struct.setRouteKeyIsSet(true);
        }
      }
    }

  }

  public static class galileoGetRouteFromDBByRouteKey_result implements org.apache.thrift.TBase<galileoGetRouteFromDBByRouteKey_result, galileoGetRouteFromDBByRouteKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("galileoGetRouteFromDBByRouteKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new galileoGetRouteFromDBByRouteKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new galileoGetRouteFromDBByRouteKey_resultTupleSchemeFactory());
    }

    public List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(galileoGetRouteFromDBByRouteKey_result.class, metaDataMap);
    }

    public galileoGetRouteFromDBByRouteKey_result() {
    }

    public galileoGetRouteFromDBByRouteKey_result(
      List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public galileoGetRouteFromDBByRouteKey_result(galileoGetRouteFromDBByRouteKey_result other) {
      if (other.isSetSuccess()) {
        List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> __this__success = new ArrayList<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute>();
        for (com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute other_element : other.success) {
          __this__success.add(new com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute(other_element));
        }
        this.success = __this__success;
      }
    }

    public galileoGetRouteFromDBByRouteKey_result deepCopy() {
      return new galileoGetRouteFromDBByRouteKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute>();
      }
      this.success.add(elem);
    }

    public List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> getSuccess() {
      return this.success;
    }

    public galileoGetRouteFromDBByRouteKey_result setSuccess(List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof galileoGetRouteFromDBByRouteKey_result)
        return this.equals((galileoGetRouteFromDBByRouteKey_result)that);
      return false;
    }

    public boolean equals(galileoGetRouteFromDBByRouteKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(galileoGetRouteFromDBByRouteKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      galileoGetRouteFromDBByRouteKey_result typedOther = (galileoGetRouteFromDBByRouteKey_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("galileoGetRouteFromDBByRouteKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class galileoGetRouteFromDBByRouteKey_resultStandardSchemeFactory implements SchemeFactory {
      public galileoGetRouteFromDBByRouteKey_resultStandardScheme getScheme() {
        return new galileoGetRouteFromDBByRouteKey_resultStandardScheme();
      }
    }

    private static class galileoGetRouteFromDBByRouteKey_resultStandardScheme extends StandardScheme<galileoGetRouteFromDBByRouteKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, galileoGetRouteFromDBByRouteKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute _elem2; // required
                    _elem2 = new com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, galileoGetRouteFromDBByRouteKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class galileoGetRouteFromDBByRouteKey_resultTupleSchemeFactory implements SchemeFactory {
      public galileoGetRouteFromDBByRouteKey_resultTupleScheme getScheme() {
        return new galileoGetRouteFromDBByRouteKey_resultTupleScheme();
      }
    }

    private static class galileoGetRouteFromDBByRouteKey_resultTupleScheme extends TupleScheme<galileoGetRouteFromDBByRouteKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, galileoGetRouteFromDBByRouteKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, galileoGetRouteFromDBByRouteKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute _elem7; // required
              _elem7 = new com.travelzen.fare.galileo.shopping.route.GalileoShoppingRoute();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class galileoGetFareRule_args implements org.apache.thrift.TBase<galileoGetFareRule_args, galileoGetFareRule_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("galileoGetFareRule_args");

    private static final org.apache.thrift.protocol.TField GALILEO_SHOPPING_FARE_RULE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("GalileoShoppingFareRuleRequest", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new galileoGetFareRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new galileoGetFareRule_argsTupleSchemeFactory());
    }

    public String GalileoShoppingFareRuleRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GALILEO_SHOPPING_FARE_RULE_REQUEST((short)1, "GalileoShoppingFareRuleRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GALILEO_SHOPPING_FARE_RULE_REQUEST
            return GALILEO_SHOPPING_FARE_RULE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GALILEO_SHOPPING_FARE_RULE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("GalileoShoppingFareRuleRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(galileoGetFareRule_args.class, metaDataMap);
    }

    public galileoGetFareRule_args() {
    }

    public galileoGetFareRule_args(
      String GalileoShoppingFareRuleRequest)
    {
      this();
      this.GalileoShoppingFareRuleRequest = GalileoShoppingFareRuleRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public galileoGetFareRule_args(galileoGetFareRule_args other) {
      if (other.isSetGalileoShoppingFareRuleRequest()) {
        this.GalileoShoppingFareRuleRequest = other.GalileoShoppingFareRuleRequest;
      }
    }

    public galileoGetFareRule_args deepCopy() {
      return new galileoGetFareRule_args(this);
    }

    @Override
    public void clear() {
      this.GalileoShoppingFareRuleRequest = null;
    }

    public String getGalileoShoppingFareRuleRequest() {
      return this.GalileoShoppingFareRuleRequest;
    }

    public galileoGetFareRule_args setGalileoShoppingFareRuleRequest(String GalileoShoppingFareRuleRequest) {
      this.GalileoShoppingFareRuleRequest = GalileoShoppingFareRuleRequest;
      return this;
    }

    public void unsetGalileoShoppingFareRuleRequest() {
      this.GalileoShoppingFareRuleRequest = null;
    }

    /** Returns true if field GalileoShoppingFareRuleRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetGalileoShoppingFareRuleRequest() {
      return this.GalileoShoppingFareRuleRequest != null;
    }

    public void setGalileoShoppingFareRuleRequestIsSet(boolean value) {
      if (!value) {
        this.GalileoShoppingFareRuleRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GALILEO_SHOPPING_FARE_RULE_REQUEST:
        if (value == null) {
          unsetGalileoShoppingFareRuleRequest();
        } else {
          setGalileoShoppingFareRuleRequest((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GALILEO_SHOPPING_FARE_RULE_REQUEST:
        return getGalileoShoppingFareRuleRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GALILEO_SHOPPING_FARE_RULE_REQUEST:
        return isSetGalileoShoppingFareRuleRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof galileoGetFareRule_args)
        return this.equals((galileoGetFareRule_args)that);
      return false;
    }

    public boolean equals(galileoGetFareRule_args that) {
      if (that == null)
        return false;

      boolean this_present_GalileoShoppingFareRuleRequest = true && this.isSetGalileoShoppingFareRuleRequest();
      boolean that_present_GalileoShoppingFareRuleRequest = true && that.isSetGalileoShoppingFareRuleRequest();
      if (this_present_GalileoShoppingFareRuleRequest || that_present_GalileoShoppingFareRuleRequest) {
        if (!(this_present_GalileoShoppingFareRuleRequest && that_present_GalileoShoppingFareRuleRequest))
          return false;
        if (!this.GalileoShoppingFareRuleRequest.equals(that.GalileoShoppingFareRuleRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(galileoGetFareRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      galileoGetFareRule_args typedOther = (galileoGetFareRule_args)other;

      lastComparison = Boolean.valueOf(isSetGalileoShoppingFareRuleRequest()).compareTo(typedOther.isSetGalileoShoppingFareRuleRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGalileoShoppingFareRuleRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GalileoShoppingFareRuleRequest, typedOther.GalileoShoppingFareRuleRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("galileoGetFareRule_args(");
      boolean first = true;

      sb.append("GalileoShoppingFareRuleRequest:");
      if (this.GalileoShoppingFareRuleRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.GalileoShoppingFareRuleRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class galileoGetFareRule_argsStandardSchemeFactory implements SchemeFactory {
      public galileoGetFareRule_argsStandardScheme getScheme() {
        return new galileoGetFareRule_argsStandardScheme();
      }
    }

    private static class galileoGetFareRule_argsStandardScheme extends StandardScheme<galileoGetFareRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, galileoGetFareRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GALILEO_SHOPPING_FARE_RULE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.GalileoShoppingFareRuleRequest = iprot.readString();
                struct.setGalileoShoppingFareRuleRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, galileoGetFareRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.GalileoShoppingFareRuleRequest != null) {
          oprot.writeFieldBegin(GALILEO_SHOPPING_FARE_RULE_REQUEST_FIELD_DESC);
          oprot.writeString(struct.GalileoShoppingFareRuleRequest);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class galileoGetFareRule_argsTupleSchemeFactory implements SchemeFactory {
      public galileoGetFareRule_argsTupleScheme getScheme() {
        return new galileoGetFareRule_argsTupleScheme();
      }
    }

    private static class galileoGetFareRule_argsTupleScheme extends TupleScheme<galileoGetFareRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, galileoGetFareRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGalileoShoppingFareRuleRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGalileoShoppingFareRuleRequest()) {
          oprot.writeString(struct.GalileoShoppingFareRuleRequest);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, galileoGetFareRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.GalileoShoppingFareRuleRequest = iprot.readString();
          struct.setGalileoShoppingFareRuleRequestIsSet(true);
        }
      }
    }

  }

  public static class galileoGetFareRule_result implements org.apache.thrift.TBase<galileoGetFareRule_result, galileoGetFareRule_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("galileoGetFareRule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new galileoGetFareRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new galileoGetFareRule_resultTupleSchemeFactory());
    }

    public com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(galileoGetFareRule_result.class, metaDataMap);
    }

    public galileoGetFareRule_result() {
    }

    public galileoGetFareRule_result(
      com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public galileoGetFareRule_result(galileoGetFareRule_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule(other.success);
      }
    }

    public galileoGetFareRule_result deepCopy() {
      return new galileoGetFareRule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule getSuccess() {
      return this.success;
    }

    public galileoGetFareRule_result setSuccess(com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof galileoGetFareRule_result)
        return this.equals((galileoGetFareRule_result)that);
      return false;
    }

    public boolean equals(galileoGetFareRule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(galileoGetFareRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      galileoGetFareRule_result typedOther = (galileoGetFareRule_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("galileoGetFareRule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class galileoGetFareRule_resultStandardSchemeFactory implements SchemeFactory {
      public galileoGetFareRule_resultStandardScheme getScheme() {
        return new galileoGetFareRule_resultStandardScheme();
      }
    }

    private static class galileoGetFareRule_resultStandardScheme extends StandardScheme<galileoGetFareRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, galileoGetFareRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, galileoGetFareRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class galileoGetFareRule_resultTupleSchemeFactory implements SchemeFactory {
      public galileoGetFareRule_resultTupleScheme getScheme() {
        return new galileoGetFareRule_resultTupleScheme();
      }
    }

    private static class galileoGetFareRule_resultTupleScheme extends TupleScheme<galileoGetFareRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, galileoGetFareRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, galileoGetFareRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.travelzen.fare.galileo.shopping.displayfarerule.GalileoShoppingDisplayFareRule();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class refreshCacheByRouteKey_args implements org.apache.thrift.TBase<refreshCacheByRouteKey_args, refreshCacheByRouteKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refreshCacheByRouteKey_args");

    private static final org.apache.thrift.protocol.TField ROUTE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("routeKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refreshCacheByRouteKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refreshCacheByRouteKey_argsTupleSchemeFactory());
    }

    public String routeKey; // required
    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUTE_KEY((short)1, "routeKey"),
      REQUEST((short)2, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUTE_KEY
            return ROUTE_KEY;
          case 2: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUTE_KEY, new org.apache.thrift.meta_data.FieldMetaData("routeKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refreshCacheByRouteKey_args.class, metaDataMap);
    }

    public refreshCacheByRouteKey_args() {
    }

    public refreshCacheByRouteKey_args(
      String routeKey,
      com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request)
    {
      this();
      this.routeKey = routeKey;
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refreshCacheByRouteKey_args(refreshCacheByRouteKey_args other) {
      if (other.isSetRouteKey()) {
        this.routeKey = other.routeKey;
      }
      if (other.isSetRequest()) {
        this.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest(other.request);
      }
    }

    public refreshCacheByRouteKey_args deepCopy() {
      return new refreshCacheByRouteKey_args(this);
    }

    @Override
    public void clear() {
      this.routeKey = null;
      this.request = null;
    }

    public String getRouteKey() {
      return this.routeKey;
    }

    public refreshCacheByRouteKey_args setRouteKey(String routeKey) {
      this.routeKey = routeKey;
      return this;
    }

    public void unsetRouteKey() {
      this.routeKey = null;
    }

    /** Returns true if field routeKey is set (has been assigned a value) and false otherwise */
    public boolean isSetRouteKey() {
      return this.routeKey != null;
    }

    public void setRouteKeyIsSet(boolean value) {
      if (!value) {
        this.routeKey = null;
      }
    }

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest getRequest() {
      return this.request;
    }

    public refreshCacheByRouteKey_args setRequest(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROUTE_KEY:
        if (value == null) {
          unsetRouteKey();
        } else {
          setRouteKey((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUTE_KEY:
        return getRouteKey();

      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROUTE_KEY:
        return isSetRouteKey();
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refreshCacheByRouteKey_args)
        return this.equals((refreshCacheByRouteKey_args)that);
      return false;
    }

    public boolean equals(refreshCacheByRouteKey_args that) {
      if (that == null)
        return false;

      boolean this_present_routeKey = true && this.isSetRouteKey();
      boolean that_present_routeKey = true && that.isSetRouteKey();
      if (this_present_routeKey || that_present_routeKey) {
        if (!(this_present_routeKey && that_present_routeKey))
          return false;
        if (!this.routeKey.equals(that.routeKey))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refreshCacheByRouteKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refreshCacheByRouteKey_args typedOther = (refreshCacheByRouteKey_args)other;

      lastComparison = Boolean.valueOf(isSetRouteKey()).compareTo(typedOther.isSetRouteKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRouteKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeKey, typedOther.routeKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refreshCacheByRouteKey_args(");
      boolean first = true;

      sb.append("routeKey:");
      if (this.routeKey == null) {
        sb.append("null");
      } else {
        sb.append(this.routeKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refreshCacheByRouteKey_argsStandardSchemeFactory implements SchemeFactory {
      public refreshCacheByRouteKey_argsStandardScheme getScheme() {
        return new refreshCacheByRouteKey_argsStandardScheme();
      }
    }

    private static class refreshCacheByRouteKey_argsStandardScheme extends StandardScheme<refreshCacheByRouteKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refreshCacheByRouteKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUTE_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.routeKey = iprot.readString();
                struct.setRouteKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refreshCacheByRouteKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.routeKey != null) {
          oprot.writeFieldBegin(ROUTE_KEY_FIELD_DESC);
          oprot.writeString(struct.routeKey);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refreshCacheByRouteKey_argsTupleSchemeFactory implements SchemeFactory {
      public refreshCacheByRouteKey_argsTupleScheme getScheme() {
        return new refreshCacheByRouteKey_argsTupleScheme();
      }
    }

    private static class refreshCacheByRouteKey_argsTupleScheme extends TupleScheme<refreshCacheByRouteKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refreshCacheByRouteKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRouteKey()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRouteKey()) {
          oprot.writeString(struct.routeKey);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refreshCacheByRouteKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.routeKey = iprot.readString();
          struct.setRouteKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class refreshCacheByRouteKey_result implements org.apache.thrift.TBase<refreshCacheByRouteKey_result, refreshCacheByRouteKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refreshCacheByRouteKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refreshCacheByRouteKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refreshCacheByRouteKey_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refreshCacheByRouteKey_result.class, metaDataMap);
    }

    public refreshCacheByRouteKey_result() {
    }

    public refreshCacheByRouteKey_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refreshCacheByRouteKey_result(refreshCacheByRouteKey_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public refreshCacheByRouteKey_result deepCopy() {
      return new refreshCacheByRouteKey_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public refreshCacheByRouteKey_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refreshCacheByRouteKey_result)
        return this.equals((refreshCacheByRouteKey_result)that);
      return false;
    }

    public boolean equals(refreshCacheByRouteKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refreshCacheByRouteKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refreshCacheByRouteKey_result typedOther = (refreshCacheByRouteKey_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refreshCacheByRouteKey_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refreshCacheByRouteKey_resultStandardSchemeFactory implements SchemeFactory {
      public refreshCacheByRouteKey_resultStandardScheme getScheme() {
        return new refreshCacheByRouteKey_resultStandardScheme();
      }
    }

    private static class refreshCacheByRouteKey_resultStandardScheme extends StandardScheme<refreshCacheByRouteKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refreshCacheByRouteKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refreshCacheByRouteKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refreshCacheByRouteKey_resultTupleSchemeFactory implements SchemeFactory {
      public refreshCacheByRouteKey_resultTupleScheme getScheme() {
        return new refreshCacheByRouteKey_resultTupleScheme();
      }
    }

    private static class refreshCacheByRouteKey_resultTupleScheme extends TupleScheme<refreshCacheByRouteKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refreshCacheByRouteKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refreshCacheByRouteKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class refreshCacheByRouteId_args implements org.apache.thrift.TBase<refreshCacheByRouteId_args, refreshCacheByRouteId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refreshCacheByRouteId_args");

    private static final org.apache.thrift.protocol.TField ROUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("routeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refreshCacheByRouteId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refreshCacheByRouteId_argsTupleSchemeFactory());
    }

    public long routeId; // required
    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUTE_ID((short)1, "routeId"),
      REQUEST((short)2, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUTE_ID
            return ROUTE_ID;
          case 2: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROUTEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("routeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refreshCacheByRouteId_args.class, metaDataMap);
    }

    public refreshCacheByRouteId_args() {
    }

    public refreshCacheByRouteId_args(
      long routeId,
      com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request)
    {
      this();
      this.routeId = routeId;
      setRouteIdIsSet(true);
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refreshCacheByRouteId_args(refreshCacheByRouteId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.routeId = other.routeId;
      if (other.isSetRequest()) {
        this.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest(other.request);
      }
    }

    public refreshCacheByRouteId_args deepCopy() {
      return new refreshCacheByRouteId_args(this);
    }

    @Override
    public void clear() {
      setRouteIdIsSet(false);
      this.routeId = 0;
      this.request = null;
    }

    public long getRouteId() {
      return this.routeId;
    }

    public refreshCacheByRouteId_args setRouteId(long routeId) {
      this.routeId = routeId;
      setRouteIdIsSet(true);
      return this;
    }

    public void unsetRouteId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUTEID_ISSET_ID);
    }

    /** Returns true if field routeId is set (has been assigned a value) and false otherwise */
    public boolean isSetRouteId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROUTEID_ISSET_ID);
    }

    public void setRouteIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUTEID_ISSET_ID, value);
    }

    public com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest getRequest() {
      return this.request;
    }

    public refreshCacheByRouteId_args setRequest(com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROUTE_ID:
        if (value == null) {
          unsetRouteId();
        } else {
          setRouteId((Long)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUTE_ID:
        return Long.valueOf(getRouteId());

      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROUTE_ID:
        return isSetRouteId();
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refreshCacheByRouteId_args)
        return this.equals((refreshCacheByRouteId_args)that);
      return false;
    }

    public boolean equals(refreshCacheByRouteId_args that) {
      if (that == null)
        return false;

      boolean this_present_routeId = true;
      boolean that_present_routeId = true;
      if (this_present_routeId || that_present_routeId) {
        if (!(this_present_routeId && that_present_routeId))
          return false;
        if (this.routeId != that.routeId)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refreshCacheByRouteId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refreshCacheByRouteId_args typedOther = (refreshCacheByRouteId_args)other;

      lastComparison = Boolean.valueOf(isSetRouteId()).compareTo(typedOther.isSetRouteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRouteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeId, typedOther.routeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refreshCacheByRouteId_args(");
      boolean first = true;

      sb.append("routeId:");
      sb.append(this.routeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refreshCacheByRouteId_argsStandardSchemeFactory implements SchemeFactory {
      public refreshCacheByRouteId_argsStandardScheme getScheme() {
        return new refreshCacheByRouteId_argsStandardScheme();
      }
    }

    private static class refreshCacheByRouteId_argsStandardScheme extends StandardScheme<refreshCacheByRouteId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refreshCacheByRouteId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUTE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.routeId = iprot.readI64();
                struct.setRouteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refreshCacheByRouteId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROUTE_ID_FIELD_DESC);
        oprot.writeI64(struct.routeId);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refreshCacheByRouteId_argsTupleSchemeFactory implements SchemeFactory {
      public refreshCacheByRouteId_argsTupleScheme getScheme() {
        return new refreshCacheByRouteId_argsTupleScheme();
      }
    }

    private static class refreshCacheByRouteId_argsTupleScheme extends TupleScheme<refreshCacheByRouteId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refreshCacheByRouteId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRouteId()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRouteId()) {
          oprot.writeI64(struct.routeId);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refreshCacheByRouteId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.routeId = iprot.readI64();
          struct.setRouteIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new com.travelzen.fare.galileo.shopping.requestresponse.GalileoShoppingRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class refreshCacheByRouteId_result implements org.apache.thrift.TBase<refreshCacheByRouteId_result, refreshCacheByRouteId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refreshCacheByRouteId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refreshCacheByRouteId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refreshCacheByRouteId_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refreshCacheByRouteId_result.class, metaDataMap);
    }

    public refreshCacheByRouteId_result() {
    }

    public refreshCacheByRouteId_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refreshCacheByRouteId_result(refreshCacheByRouteId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public refreshCacheByRouteId_result deepCopy() {
      return new refreshCacheByRouteId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public refreshCacheByRouteId_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refreshCacheByRouteId_result)
        return this.equals((refreshCacheByRouteId_result)that);
      return false;
    }

    public boolean equals(refreshCacheByRouteId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refreshCacheByRouteId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refreshCacheByRouteId_result typedOther = (refreshCacheByRouteId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refreshCacheByRouteId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refreshCacheByRouteId_resultStandardSchemeFactory implements SchemeFactory {
      public refreshCacheByRouteId_resultStandardScheme getScheme() {
        return new refreshCacheByRouteId_resultStandardScheme();
      }
    }

    private static class refreshCacheByRouteId_resultStandardScheme extends StandardScheme<refreshCacheByRouteId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refreshCacheByRouteId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refreshCacheByRouteId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refreshCacheByRouteId_resultTupleSchemeFactory implements SchemeFactory {
      public refreshCacheByRouteId_resultTupleScheme getScheme() {
        return new refreshCacheByRouteId_resultTupleScheme();
      }
    }

    private static class refreshCacheByRouteId_resultTupleScheme extends TupleScheme<refreshCacheByRouteId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refreshCacheByRouteId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refreshCacheByRouteId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
