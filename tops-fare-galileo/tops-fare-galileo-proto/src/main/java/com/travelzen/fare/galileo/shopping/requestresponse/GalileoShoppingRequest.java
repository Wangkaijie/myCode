/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.fare.galileo.shopping.requestresponse;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GalileoShoppingRequest implements org.apache.thrift.TBase<GalileoShoppingRequest, GalileoShoppingRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GalileoShoppingRequest");

  private static final org.apache.thrift.protocol.TField TRIP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tripType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CABIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cabinType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PASSENGER_TYPE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("passengerTypeSet", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField REQUEST_PROCESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("requestProcessList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField IS_DIRECT_FLIGHT_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("isDirectFlightOnly", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PERMITTED_CARRIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("permittedCarriers", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField PROHIBITED_CARRIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("prohibitedCarriers", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField MAX_RETURN_ROUTE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxReturnRouteNum", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CHARGE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeAmt", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CHARGE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeBy", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SOURCE_MARK_UP_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceMarkUpBy", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SOURCE_MARK_UP_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("SourceMarkUpAmt", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GalileoShoppingRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GalileoShoppingRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see com.travelzen.fare.galileo.shopping.common.GalileoTripType
   */
  public com.travelzen.fare.galileo.shopping.common.GalileoTripType tripType; // required
  /**
   * 
   * @see com.travelzen.fare.galileo.shopping.common.GalileoCabinType
   */
  public com.travelzen.fare.galileo.shopping.common.GalileoCabinType cabinType; // optional
  public Set<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType> passengerTypeSet; // optional
  public List<GalileoShoppingRequestProcess> requestProcessList; // optional
  public String isDirectFlightOnly; // optional
  public List<String> permittedCarriers; // optional
  public List<String> prohibitedCarriers; // optional
  public int maxReturnRouteNum; // optional
  public String chargeAmt; // optional
  public String chargeBy; // optional
  public String source; // optional
  public String sourceMarkUpBy; // optional
  public String SourceMarkUpAmt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.travelzen.fare.galileo.shopping.common.GalileoTripType
     */
    TRIP_TYPE((short)1, "tripType"),
    /**
     * 
     * @see com.travelzen.fare.galileo.shopping.common.GalileoCabinType
     */
    CABIN_TYPE((short)3, "cabinType"),
    PASSENGER_TYPE_SET((short)4, "passengerTypeSet"),
    REQUEST_PROCESS_LIST((short)5, "requestProcessList"),
    IS_DIRECT_FLIGHT_ONLY((short)13, "isDirectFlightOnly"),
    PERMITTED_CARRIERS((short)14, "permittedCarriers"),
    PROHIBITED_CARRIERS((short)15, "prohibitedCarriers"),
    MAX_RETURN_ROUTE_NUM((short)16, "maxReturnRouteNum"),
    CHARGE_AMT((short)17, "chargeAmt"),
    CHARGE_BY((short)18, "chargeBy"),
    SOURCE((short)19, "source"),
    SOURCE_MARK_UP_BY((short)21, "sourceMarkUpBy"),
    SOURCE_MARK_UP_AMT((short)22, "SourceMarkUpAmt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRIP_TYPE
          return TRIP_TYPE;
        case 3: // CABIN_TYPE
          return CABIN_TYPE;
        case 4: // PASSENGER_TYPE_SET
          return PASSENGER_TYPE_SET;
        case 5: // REQUEST_PROCESS_LIST
          return REQUEST_PROCESS_LIST;
        case 13: // IS_DIRECT_FLIGHT_ONLY
          return IS_DIRECT_FLIGHT_ONLY;
        case 14: // PERMITTED_CARRIERS
          return PERMITTED_CARRIERS;
        case 15: // PROHIBITED_CARRIERS
          return PROHIBITED_CARRIERS;
        case 16: // MAX_RETURN_ROUTE_NUM
          return MAX_RETURN_ROUTE_NUM;
        case 17: // CHARGE_AMT
          return CHARGE_AMT;
        case 18: // CHARGE_BY
          return CHARGE_BY;
        case 19: // SOURCE
          return SOURCE;
        case 21: // SOURCE_MARK_UP_BY
          return SOURCE_MARK_UP_BY;
        case 22: // SOURCE_MARK_UP_AMT
          return SOURCE_MARK_UP_AMT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXRETURNROUTENUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CABIN_TYPE,_Fields.PASSENGER_TYPE_SET,_Fields.REQUEST_PROCESS_LIST,_Fields.IS_DIRECT_FLIGHT_ONLY,_Fields.PERMITTED_CARRIERS,_Fields.PROHIBITED_CARRIERS,_Fields.MAX_RETURN_ROUTE_NUM,_Fields.CHARGE_AMT,_Fields.CHARGE_BY,_Fields.SOURCE,_Fields.SOURCE_MARK_UP_BY,_Fields.SOURCE_MARK_UP_AMT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRIP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tripType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.travelzen.fare.galileo.shopping.common.GalileoTripType.class)));
    tmpMap.put(_Fields.CABIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cabinType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.travelzen.fare.galileo.shopping.common.GalileoCabinType.class)));
    tmpMap.put(_Fields.PASSENGER_TYPE_SET, new org.apache.thrift.meta_data.FieldMetaData("passengerTypeSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.travelzen.fare.galileo.shopping.common.GalileoPassengerType.class))));
    tmpMap.put(_Fields.REQUEST_PROCESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("requestProcessList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GalileoShoppingRequestProcess.class))));
    tmpMap.put(_Fields.IS_DIRECT_FLIGHT_ONLY, new org.apache.thrift.meta_data.FieldMetaData("isDirectFlightOnly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMITTED_CARRIERS, new org.apache.thrift.meta_data.FieldMetaData("permittedCarriers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROHIBITED_CARRIERS, new org.apache.thrift.meta_data.FieldMetaData("prohibitedCarriers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAX_RETURN_ROUTE_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxReturnRouteNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARGE_AMT, new org.apache.thrift.meta_data.FieldMetaData("chargeAmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARGE_BY, new org.apache.thrift.meta_data.FieldMetaData("chargeBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_MARK_UP_BY, new org.apache.thrift.meta_data.FieldMetaData("sourceMarkUpBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_MARK_UP_AMT, new org.apache.thrift.meta_data.FieldMetaData("SourceMarkUpAmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GalileoShoppingRequest.class, metaDataMap);
  }

  public GalileoShoppingRequest() {
  }

  public GalileoShoppingRequest(
    com.travelzen.fare.galileo.shopping.common.GalileoTripType tripType)
  {
    this();
    this.tripType = tripType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GalileoShoppingRequest(GalileoShoppingRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTripType()) {
      this.tripType = other.tripType;
    }
    if (other.isSetCabinType()) {
      this.cabinType = other.cabinType;
    }
    if (other.isSetPassengerTypeSet()) {
      Set<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType> __this__passengerTypeSet = new HashSet<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType>();
      for (com.travelzen.fare.galileo.shopping.common.GalileoPassengerType other_element : other.passengerTypeSet) {
        __this__passengerTypeSet.add(other_element);
      }
      this.passengerTypeSet = __this__passengerTypeSet;
    }
    if (other.isSetRequestProcessList()) {
      List<GalileoShoppingRequestProcess> __this__requestProcessList = new ArrayList<GalileoShoppingRequestProcess>();
      for (GalileoShoppingRequestProcess other_element : other.requestProcessList) {
        __this__requestProcessList.add(new GalileoShoppingRequestProcess(other_element));
      }
      this.requestProcessList = __this__requestProcessList;
    }
    if (other.isSetIsDirectFlightOnly()) {
      this.isDirectFlightOnly = other.isDirectFlightOnly;
    }
    if (other.isSetPermittedCarriers()) {
      List<String> __this__permittedCarriers = new ArrayList<String>();
      for (String other_element : other.permittedCarriers) {
        __this__permittedCarriers.add(other_element);
      }
      this.permittedCarriers = __this__permittedCarriers;
    }
    if (other.isSetProhibitedCarriers()) {
      List<String> __this__prohibitedCarriers = new ArrayList<String>();
      for (String other_element : other.prohibitedCarriers) {
        __this__prohibitedCarriers.add(other_element);
      }
      this.prohibitedCarriers = __this__prohibitedCarriers;
    }
    this.maxReturnRouteNum = other.maxReturnRouteNum;
    if (other.isSetChargeAmt()) {
      this.chargeAmt = other.chargeAmt;
    }
    if (other.isSetChargeBy()) {
      this.chargeBy = other.chargeBy;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetSourceMarkUpBy()) {
      this.sourceMarkUpBy = other.sourceMarkUpBy;
    }
    if (other.isSetSourceMarkUpAmt()) {
      this.SourceMarkUpAmt = other.SourceMarkUpAmt;
    }
  }

  public GalileoShoppingRequest deepCopy() {
    return new GalileoShoppingRequest(this);
  }

  @Override
  public void clear() {
    this.tripType = null;
    this.cabinType = null;
    this.passengerTypeSet = null;
    this.requestProcessList = null;
    this.isDirectFlightOnly = null;
    this.permittedCarriers = null;
    this.prohibitedCarriers = null;
    setMaxReturnRouteNumIsSet(false);
    this.maxReturnRouteNum = 0;
    this.chargeAmt = null;
    this.chargeBy = null;
    this.source = null;
    this.sourceMarkUpBy = null;
    this.SourceMarkUpAmt = null;
  }

  /**
   * 
   * @see com.travelzen.fare.galileo.shopping.common.GalileoTripType
   */
  public com.travelzen.fare.galileo.shopping.common.GalileoTripType getTripType() {
    return this.tripType;
  }

  /**
   * 
   * @see com.travelzen.fare.galileo.shopping.common.GalileoTripType
   */
  public GalileoShoppingRequest setTripType(com.travelzen.fare.galileo.shopping.common.GalileoTripType tripType) {
    this.tripType = tripType;
    return this;
  }

  public void unsetTripType() {
    this.tripType = null;
  }

  /** Returns true if field tripType is set (has been assigned a value) and false otherwise */
  public boolean isSetTripType() {
    return this.tripType != null;
  }

  public void setTripTypeIsSet(boolean value) {
    if (!value) {
      this.tripType = null;
    }
  }

  /**
   * 
   * @see com.travelzen.fare.galileo.shopping.common.GalileoCabinType
   */
  public com.travelzen.fare.galileo.shopping.common.GalileoCabinType getCabinType() {
    return this.cabinType;
  }

  /**
   * 
   * @see com.travelzen.fare.galileo.shopping.common.GalileoCabinType
   */
  public GalileoShoppingRequest setCabinType(com.travelzen.fare.galileo.shopping.common.GalileoCabinType cabinType) {
    this.cabinType = cabinType;
    return this;
  }

  public void unsetCabinType() {
    this.cabinType = null;
  }

  /** Returns true if field cabinType is set (has been assigned a value) and false otherwise */
  public boolean isSetCabinType() {
    return this.cabinType != null;
  }

  public void setCabinTypeIsSet(boolean value) {
    if (!value) {
      this.cabinType = null;
    }
  }

  public int getPassengerTypeSetSize() {
    return (this.passengerTypeSet == null) ? 0 : this.passengerTypeSet.size();
  }

  public java.util.Iterator<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType> getPassengerTypeSetIterator() {
    return (this.passengerTypeSet == null) ? null : this.passengerTypeSet.iterator();
  }

  public void addToPassengerTypeSet(com.travelzen.fare.galileo.shopping.common.GalileoPassengerType elem) {
    if (this.passengerTypeSet == null) {
      this.passengerTypeSet = new HashSet<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType>();
    }
    this.passengerTypeSet.add(elem);
  }

  public Set<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType> getPassengerTypeSet() {
    return this.passengerTypeSet;
  }

  public GalileoShoppingRequest setPassengerTypeSet(Set<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType> passengerTypeSet) {
    this.passengerTypeSet = passengerTypeSet;
    return this;
  }

  public void unsetPassengerTypeSet() {
    this.passengerTypeSet = null;
  }

  /** Returns true if field passengerTypeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengerTypeSet() {
    return this.passengerTypeSet != null;
  }

  public void setPassengerTypeSetIsSet(boolean value) {
    if (!value) {
      this.passengerTypeSet = null;
    }
  }

  public int getRequestProcessListSize() {
    return (this.requestProcessList == null) ? 0 : this.requestProcessList.size();
  }

  public java.util.Iterator<GalileoShoppingRequestProcess> getRequestProcessListIterator() {
    return (this.requestProcessList == null) ? null : this.requestProcessList.iterator();
  }

  public void addToRequestProcessList(GalileoShoppingRequestProcess elem) {
    if (this.requestProcessList == null) {
      this.requestProcessList = new ArrayList<GalileoShoppingRequestProcess>();
    }
    this.requestProcessList.add(elem);
  }

  public List<GalileoShoppingRequestProcess> getRequestProcessList() {
    return this.requestProcessList;
  }

  public GalileoShoppingRequest setRequestProcessList(List<GalileoShoppingRequestProcess> requestProcessList) {
    this.requestProcessList = requestProcessList;
    return this;
  }

  public void unsetRequestProcessList() {
    this.requestProcessList = null;
  }

  /** Returns true if field requestProcessList is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestProcessList() {
    return this.requestProcessList != null;
  }

  public void setRequestProcessListIsSet(boolean value) {
    if (!value) {
      this.requestProcessList = null;
    }
  }

  public String getIsDirectFlightOnly() {
    return this.isDirectFlightOnly;
  }

  public GalileoShoppingRequest setIsDirectFlightOnly(String isDirectFlightOnly) {
    this.isDirectFlightOnly = isDirectFlightOnly;
    return this;
  }

  public void unsetIsDirectFlightOnly() {
    this.isDirectFlightOnly = null;
  }

  /** Returns true if field isDirectFlightOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDirectFlightOnly() {
    return this.isDirectFlightOnly != null;
  }

  public void setIsDirectFlightOnlyIsSet(boolean value) {
    if (!value) {
      this.isDirectFlightOnly = null;
    }
  }

  public int getPermittedCarriersSize() {
    return (this.permittedCarriers == null) ? 0 : this.permittedCarriers.size();
  }

  public java.util.Iterator<String> getPermittedCarriersIterator() {
    return (this.permittedCarriers == null) ? null : this.permittedCarriers.iterator();
  }

  public void addToPermittedCarriers(String elem) {
    if (this.permittedCarriers == null) {
      this.permittedCarriers = new ArrayList<String>();
    }
    this.permittedCarriers.add(elem);
  }

  public List<String> getPermittedCarriers() {
    return this.permittedCarriers;
  }

  public GalileoShoppingRequest setPermittedCarriers(List<String> permittedCarriers) {
    this.permittedCarriers = permittedCarriers;
    return this;
  }

  public void unsetPermittedCarriers() {
    this.permittedCarriers = null;
  }

  /** Returns true if field permittedCarriers is set (has been assigned a value) and false otherwise */
  public boolean isSetPermittedCarriers() {
    return this.permittedCarriers != null;
  }

  public void setPermittedCarriersIsSet(boolean value) {
    if (!value) {
      this.permittedCarriers = null;
    }
  }

  public int getProhibitedCarriersSize() {
    return (this.prohibitedCarriers == null) ? 0 : this.prohibitedCarriers.size();
  }

  public java.util.Iterator<String> getProhibitedCarriersIterator() {
    return (this.prohibitedCarriers == null) ? null : this.prohibitedCarriers.iterator();
  }

  public void addToProhibitedCarriers(String elem) {
    if (this.prohibitedCarriers == null) {
      this.prohibitedCarriers = new ArrayList<String>();
    }
    this.prohibitedCarriers.add(elem);
  }

  public List<String> getProhibitedCarriers() {
    return this.prohibitedCarriers;
  }

  public GalileoShoppingRequest setProhibitedCarriers(List<String> prohibitedCarriers) {
    this.prohibitedCarriers = prohibitedCarriers;
    return this;
  }

  public void unsetProhibitedCarriers() {
    this.prohibitedCarriers = null;
  }

  /** Returns true if field prohibitedCarriers is set (has been assigned a value) and false otherwise */
  public boolean isSetProhibitedCarriers() {
    return this.prohibitedCarriers != null;
  }

  public void setProhibitedCarriersIsSet(boolean value) {
    if (!value) {
      this.prohibitedCarriers = null;
    }
  }

  public int getMaxReturnRouteNum() {
    return this.maxReturnRouteNum;
  }

  public GalileoShoppingRequest setMaxReturnRouteNum(int maxReturnRouteNum) {
    this.maxReturnRouteNum = maxReturnRouteNum;
    setMaxReturnRouteNumIsSet(true);
    return this;
  }

  public void unsetMaxReturnRouteNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRETURNROUTENUM_ISSET_ID);
  }

  /** Returns true if field maxReturnRouteNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxReturnRouteNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXRETURNROUTENUM_ISSET_ID);
  }

  public void setMaxReturnRouteNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRETURNROUTENUM_ISSET_ID, value);
  }

  public String getChargeAmt() {
    return this.chargeAmt;
  }

  public GalileoShoppingRequest setChargeAmt(String chargeAmt) {
    this.chargeAmt = chargeAmt;
    return this;
  }

  public void unsetChargeAmt() {
    this.chargeAmt = null;
  }

  /** Returns true if field chargeAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeAmt() {
    return this.chargeAmt != null;
  }

  public void setChargeAmtIsSet(boolean value) {
    if (!value) {
      this.chargeAmt = null;
    }
  }

  public String getChargeBy() {
    return this.chargeBy;
  }

  public GalileoShoppingRequest setChargeBy(String chargeBy) {
    this.chargeBy = chargeBy;
    return this;
  }

  public void unsetChargeBy() {
    this.chargeBy = null;
  }

  /** Returns true if field chargeBy is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeBy() {
    return this.chargeBy != null;
  }

  public void setChargeByIsSet(boolean value) {
    if (!value) {
      this.chargeBy = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public GalileoShoppingRequest setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public String getSourceMarkUpBy() {
    return this.sourceMarkUpBy;
  }

  public GalileoShoppingRequest setSourceMarkUpBy(String sourceMarkUpBy) {
    this.sourceMarkUpBy = sourceMarkUpBy;
    return this;
  }

  public void unsetSourceMarkUpBy() {
    this.sourceMarkUpBy = null;
  }

  /** Returns true if field sourceMarkUpBy is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceMarkUpBy() {
    return this.sourceMarkUpBy != null;
  }

  public void setSourceMarkUpByIsSet(boolean value) {
    if (!value) {
      this.sourceMarkUpBy = null;
    }
  }

  public String getSourceMarkUpAmt() {
    return this.SourceMarkUpAmt;
  }

  public GalileoShoppingRequest setSourceMarkUpAmt(String SourceMarkUpAmt) {
    this.SourceMarkUpAmt = SourceMarkUpAmt;
    return this;
  }

  public void unsetSourceMarkUpAmt() {
    this.SourceMarkUpAmt = null;
  }

  /** Returns true if field SourceMarkUpAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceMarkUpAmt() {
    return this.SourceMarkUpAmt != null;
  }

  public void setSourceMarkUpAmtIsSet(boolean value) {
    if (!value) {
      this.SourceMarkUpAmt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRIP_TYPE:
      if (value == null) {
        unsetTripType();
      } else {
        setTripType((com.travelzen.fare.galileo.shopping.common.GalileoTripType)value);
      }
      break;

    case CABIN_TYPE:
      if (value == null) {
        unsetCabinType();
      } else {
        setCabinType((com.travelzen.fare.galileo.shopping.common.GalileoCabinType)value);
      }
      break;

    case PASSENGER_TYPE_SET:
      if (value == null) {
        unsetPassengerTypeSet();
      } else {
        setPassengerTypeSet((Set<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType>)value);
      }
      break;

    case REQUEST_PROCESS_LIST:
      if (value == null) {
        unsetRequestProcessList();
      } else {
        setRequestProcessList((List<GalileoShoppingRequestProcess>)value);
      }
      break;

    case IS_DIRECT_FLIGHT_ONLY:
      if (value == null) {
        unsetIsDirectFlightOnly();
      } else {
        setIsDirectFlightOnly((String)value);
      }
      break;

    case PERMITTED_CARRIERS:
      if (value == null) {
        unsetPermittedCarriers();
      } else {
        setPermittedCarriers((List<String>)value);
      }
      break;

    case PROHIBITED_CARRIERS:
      if (value == null) {
        unsetProhibitedCarriers();
      } else {
        setProhibitedCarriers((List<String>)value);
      }
      break;

    case MAX_RETURN_ROUTE_NUM:
      if (value == null) {
        unsetMaxReturnRouteNum();
      } else {
        setMaxReturnRouteNum((Integer)value);
      }
      break;

    case CHARGE_AMT:
      if (value == null) {
        unsetChargeAmt();
      } else {
        setChargeAmt((String)value);
      }
      break;

    case CHARGE_BY:
      if (value == null) {
        unsetChargeBy();
      } else {
        setChargeBy((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case SOURCE_MARK_UP_BY:
      if (value == null) {
        unsetSourceMarkUpBy();
      } else {
        setSourceMarkUpBy((String)value);
      }
      break;

    case SOURCE_MARK_UP_AMT:
      if (value == null) {
        unsetSourceMarkUpAmt();
      } else {
        setSourceMarkUpAmt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRIP_TYPE:
      return getTripType();

    case CABIN_TYPE:
      return getCabinType();

    case PASSENGER_TYPE_SET:
      return getPassengerTypeSet();

    case REQUEST_PROCESS_LIST:
      return getRequestProcessList();

    case IS_DIRECT_FLIGHT_ONLY:
      return getIsDirectFlightOnly();

    case PERMITTED_CARRIERS:
      return getPermittedCarriers();

    case PROHIBITED_CARRIERS:
      return getProhibitedCarriers();

    case MAX_RETURN_ROUTE_NUM:
      return Integer.valueOf(getMaxReturnRouteNum());

    case CHARGE_AMT:
      return getChargeAmt();

    case CHARGE_BY:
      return getChargeBy();

    case SOURCE:
      return getSource();

    case SOURCE_MARK_UP_BY:
      return getSourceMarkUpBy();

    case SOURCE_MARK_UP_AMT:
      return getSourceMarkUpAmt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRIP_TYPE:
      return isSetTripType();
    case CABIN_TYPE:
      return isSetCabinType();
    case PASSENGER_TYPE_SET:
      return isSetPassengerTypeSet();
    case REQUEST_PROCESS_LIST:
      return isSetRequestProcessList();
    case IS_DIRECT_FLIGHT_ONLY:
      return isSetIsDirectFlightOnly();
    case PERMITTED_CARRIERS:
      return isSetPermittedCarriers();
    case PROHIBITED_CARRIERS:
      return isSetProhibitedCarriers();
    case MAX_RETURN_ROUTE_NUM:
      return isSetMaxReturnRouteNum();
    case CHARGE_AMT:
      return isSetChargeAmt();
    case CHARGE_BY:
      return isSetChargeBy();
    case SOURCE:
      return isSetSource();
    case SOURCE_MARK_UP_BY:
      return isSetSourceMarkUpBy();
    case SOURCE_MARK_UP_AMT:
      return isSetSourceMarkUpAmt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GalileoShoppingRequest)
      return this.equals((GalileoShoppingRequest)that);
    return false;
  }

  public boolean equals(GalileoShoppingRequest that) {
    if (that == null)
      return false;

    boolean this_present_tripType = true && this.isSetTripType();
    boolean that_present_tripType = true && that.isSetTripType();
    if (this_present_tripType || that_present_tripType) {
      if (!(this_present_tripType && that_present_tripType))
        return false;
      if (!this.tripType.equals(that.tripType))
        return false;
    }

    boolean this_present_cabinType = true && this.isSetCabinType();
    boolean that_present_cabinType = true && that.isSetCabinType();
    if (this_present_cabinType || that_present_cabinType) {
      if (!(this_present_cabinType && that_present_cabinType))
        return false;
      if (!this.cabinType.equals(that.cabinType))
        return false;
    }

    boolean this_present_passengerTypeSet = true && this.isSetPassengerTypeSet();
    boolean that_present_passengerTypeSet = true && that.isSetPassengerTypeSet();
    if (this_present_passengerTypeSet || that_present_passengerTypeSet) {
      if (!(this_present_passengerTypeSet && that_present_passengerTypeSet))
        return false;
      if (!this.passengerTypeSet.equals(that.passengerTypeSet))
        return false;
    }

    boolean this_present_requestProcessList = true && this.isSetRequestProcessList();
    boolean that_present_requestProcessList = true && that.isSetRequestProcessList();
    if (this_present_requestProcessList || that_present_requestProcessList) {
      if (!(this_present_requestProcessList && that_present_requestProcessList))
        return false;
      if (!this.requestProcessList.equals(that.requestProcessList))
        return false;
    }

    boolean this_present_isDirectFlightOnly = true && this.isSetIsDirectFlightOnly();
    boolean that_present_isDirectFlightOnly = true && that.isSetIsDirectFlightOnly();
    if (this_present_isDirectFlightOnly || that_present_isDirectFlightOnly) {
      if (!(this_present_isDirectFlightOnly && that_present_isDirectFlightOnly))
        return false;
      if (!this.isDirectFlightOnly.equals(that.isDirectFlightOnly))
        return false;
    }

    boolean this_present_permittedCarriers = true && this.isSetPermittedCarriers();
    boolean that_present_permittedCarriers = true && that.isSetPermittedCarriers();
    if (this_present_permittedCarriers || that_present_permittedCarriers) {
      if (!(this_present_permittedCarriers && that_present_permittedCarriers))
        return false;
      if (!this.permittedCarriers.equals(that.permittedCarriers))
        return false;
    }

    boolean this_present_prohibitedCarriers = true && this.isSetProhibitedCarriers();
    boolean that_present_prohibitedCarriers = true && that.isSetProhibitedCarriers();
    if (this_present_prohibitedCarriers || that_present_prohibitedCarriers) {
      if (!(this_present_prohibitedCarriers && that_present_prohibitedCarriers))
        return false;
      if (!this.prohibitedCarriers.equals(that.prohibitedCarriers))
        return false;
    }

    boolean this_present_maxReturnRouteNum = true && this.isSetMaxReturnRouteNum();
    boolean that_present_maxReturnRouteNum = true && that.isSetMaxReturnRouteNum();
    if (this_present_maxReturnRouteNum || that_present_maxReturnRouteNum) {
      if (!(this_present_maxReturnRouteNum && that_present_maxReturnRouteNum))
        return false;
      if (this.maxReturnRouteNum != that.maxReturnRouteNum)
        return false;
    }

    boolean this_present_chargeAmt = true && this.isSetChargeAmt();
    boolean that_present_chargeAmt = true && that.isSetChargeAmt();
    if (this_present_chargeAmt || that_present_chargeAmt) {
      if (!(this_present_chargeAmt && that_present_chargeAmt))
        return false;
      if (!this.chargeAmt.equals(that.chargeAmt))
        return false;
    }

    boolean this_present_chargeBy = true && this.isSetChargeBy();
    boolean that_present_chargeBy = true && that.isSetChargeBy();
    if (this_present_chargeBy || that_present_chargeBy) {
      if (!(this_present_chargeBy && that_present_chargeBy))
        return false;
      if (!this.chargeBy.equals(that.chargeBy))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_sourceMarkUpBy = true && this.isSetSourceMarkUpBy();
    boolean that_present_sourceMarkUpBy = true && that.isSetSourceMarkUpBy();
    if (this_present_sourceMarkUpBy || that_present_sourceMarkUpBy) {
      if (!(this_present_sourceMarkUpBy && that_present_sourceMarkUpBy))
        return false;
      if (!this.sourceMarkUpBy.equals(that.sourceMarkUpBy))
        return false;
    }

    boolean this_present_SourceMarkUpAmt = true && this.isSetSourceMarkUpAmt();
    boolean that_present_SourceMarkUpAmt = true && that.isSetSourceMarkUpAmt();
    if (this_present_SourceMarkUpAmt || that_present_SourceMarkUpAmt) {
      if (!(this_present_SourceMarkUpAmt && that_present_SourceMarkUpAmt))
        return false;
      if (!this.SourceMarkUpAmt.equals(that.SourceMarkUpAmt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GalileoShoppingRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GalileoShoppingRequest typedOther = (GalileoShoppingRequest)other;

    lastComparison = Boolean.valueOf(isSetTripType()).compareTo(typedOther.isSetTripType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTripType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tripType, typedOther.tripType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCabinType()).compareTo(typedOther.isSetCabinType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCabinType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cabinType, typedOther.cabinType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassengerTypeSet()).compareTo(typedOther.isSetPassengerTypeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengerTypeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengerTypeSet, typedOther.passengerTypeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestProcessList()).compareTo(typedOther.isSetRequestProcessList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestProcessList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestProcessList, typedOther.requestProcessList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDirectFlightOnly()).compareTo(typedOther.isSetIsDirectFlightOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDirectFlightOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDirectFlightOnly, typedOther.isDirectFlightOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermittedCarriers()).compareTo(typedOther.isSetPermittedCarriers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermittedCarriers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permittedCarriers, typedOther.permittedCarriers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProhibitedCarriers()).compareTo(typedOther.isSetProhibitedCarriers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProhibitedCarriers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prohibitedCarriers, typedOther.prohibitedCarriers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxReturnRouteNum()).compareTo(typedOther.isSetMaxReturnRouteNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxReturnRouteNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxReturnRouteNum, typedOther.maxReturnRouteNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeAmt()).compareTo(typedOther.isSetChargeAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeAmt, typedOther.chargeAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeBy()).compareTo(typedOther.isSetChargeBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeBy, typedOther.chargeBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceMarkUpBy()).compareTo(typedOther.isSetSourceMarkUpBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceMarkUpBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceMarkUpBy, typedOther.sourceMarkUpBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceMarkUpAmt()).compareTo(typedOther.isSetSourceMarkUpAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceMarkUpAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SourceMarkUpAmt, typedOther.SourceMarkUpAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GalileoShoppingRequest(");
    boolean first = true;

    sb.append("tripType:");
    if (this.tripType == null) {
      sb.append("null");
    } else {
      sb.append(this.tripType);
    }
    first = false;
    if (isSetCabinType()) {
      if (!first) sb.append(", ");
      sb.append("cabinType:");
      if (this.cabinType == null) {
        sb.append("null");
      } else {
        sb.append(this.cabinType);
      }
      first = false;
    }
    if (isSetPassengerTypeSet()) {
      if (!first) sb.append(", ");
      sb.append("passengerTypeSet:");
      if (this.passengerTypeSet == null) {
        sb.append("null");
      } else {
        sb.append(this.passengerTypeSet);
      }
      first = false;
    }
    if (isSetRequestProcessList()) {
      if (!first) sb.append(", ");
      sb.append("requestProcessList:");
      if (this.requestProcessList == null) {
        sb.append("null");
      } else {
        sb.append(this.requestProcessList);
      }
      first = false;
    }
    if (isSetIsDirectFlightOnly()) {
      if (!first) sb.append(", ");
      sb.append("isDirectFlightOnly:");
      if (this.isDirectFlightOnly == null) {
        sb.append("null");
      } else {
        sb.append(this.isDirectFlightOnly);
      }
      first = false;
    }
    if (isSetPermittedCarriers()) {
      if (!first) sb.append(", ");
      sb.append("permittedCarriers:");
      if (this.permittedCarriers == null) {
        sb.append("null");
      } else {
        sb.append(this.permittedCarriers);
      }
      first = false;
    }
    if (isSetProhibitedCarriers()) {
      if (!first) sb.append(", ");
      sb.append("prohibitedCarriers:");
      if (this.prohibitedCarriers == null) {
        sb.append("null");
      } else {
        sb.append(this.prohibitedCarriers);
      }
      first = false;
    }
    if (isSetMaxReturnRouteNum()) {
      if (!first) sb.append(", ");
      sb.append("maxReturnRouteNum:");
      sb.append(this.maxReturnRouteNum);
      first = false;
    }
    if (isSetChargeAmt()) {
      if (!first) sb.append(", ");
      sb.append("chargeAmt:");
      if (this.chargeAmt == null) {
        sb.append("null");
      } else {
        sb.append(this.chargeAmt);
      }
      first = false;
    }
    if (isSetChargeBy()) {
      if (!first) sb.append(", ");
      sb.append("chargeBy:");
      if (this.chargeBy == null) {
        sb.append("null");
      } else {
        sb.append(this.chargeBy);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetSourceMarkUpBy()) {
      if (!first) sb.append(", ");
      sb.append("sourceMarkUpBy:");
      if (this.sourceMarkUpBy == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceMarkUpBy);
      }
      first = false;
    }
    if (isSetSourceMarkUpAmt()) {
      if (!first) sb.append(", ");
      sb.append("SourceMarkUpAmt:");
      if (this.SourceMarkUpAmt == null) {
        sb.append("null");
      } else {
        sb.append(this.SourceMarkUpAmt);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tripType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tripType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GalileoShoppingRequestStandardSchemeFactory implements SchemeFactory {
    public GalileoShoppingRequestStandardScheme getScheme() {
      return new GalileoShoppingRequestStandardScheme();
    }
  }

  private static class GalileoShoppingRequestStandardScheme extends StandardScheme<GalileoShoppingRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GalileoShoppingRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRIP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tripType = com.travelzen.fare.galileo.shopping.common.GalileoTripType.findByValue(iprot.readI32());
              struct.setTripTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CABIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cabinType = com.travelzen.fare.galileo.shopping.common.GalileoCabinType.findByValue(iprot.readI32());
              struct.setCabinTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSENGER_TYPE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.passengerTypeSet = new HashSet<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  com.travelzen.fare.galileo.shopping.common.GalileoPassengerType _elem2; // required
                  _elem2 = com.travelzen.fare.galileo.shopping.common.GalileoPassengerType.findByValue(iprot.readI32());
                  struct.passengerTypeSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setPassengerTypeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQUEST_PROCESS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.requestProcessList = new ArrayList<GalileoShoppingRequestProcess>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  GalileoShoppingRequestProcess _elem5; // required
                  _elem5 = new GalileoShoppingRequestProcess();
                  _elem5.read(iprot);
                  struct.requestProcessList.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setRequestProcessListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_DIRECT_FLIGHT_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isDirectFlightOnly = iprot.readString();
              struct.setIsDirectFlightOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PERMITTED_CARRIERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.permittedCarriers = new ArrayList<String>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  String _elem8; // required
                  _elem8 = iprot.readString();
                  struct.permittedCarriers.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setPermittedCarriersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROHIBITED_CARRIERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.prohibitedCarriers = new ArrayList<String>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  String _elem11; // required
                  _elem11 = iprot.readString();
                  struct.prohibitedCarriers.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setProhibitedCarriersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MAX_RETURN_ROUTE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxReturnRouteNum = iprot.readI32();
              struct.setMaxReturnRouteNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CHARGE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chargeAmt = iprot.readString();
              struct.setChargeAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CHARGE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chargeBy = iprot.readString();
              struct.setChargeByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SOURCE_MARK_UP_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceMarkUpBy = iprot.readString();
              struct.setSourceMarkUpByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SOURCE_MARK_UP_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SourceMarkUpAmt = iprot.readString();
              struct.setSourceMarkUpAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GalileoShoppingRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tripType != null) {
        oprot.writeFieldBegin(TRIP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.tripType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.cabinType != null) {
        if (struct.isSetCabinType()) {
          oprot.writeFieldBegin(CABIN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.cabinType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.passengerTypeSet != null) {
        if (struct.isSetPassengerTypeSet()) {
          oprot.writeFieldBegin(PASSENGER_TYPE_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.passengerTypeSet.size()));
            for (com.travelzen.fare.galileo.shopping.common.GalileoPassengerType _iter12 : struct.passengerTypeSet)
            {
              oprot.writeI32(_iter12.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.requestProcessList != null) {
        if (struct.isSetRequestProcessList()) {
          oprot.writeFieldBegin(REQUEST_PROCESS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.requestProcessList.size()));
            for (GalileoShoppingRequestProcess _iter13 : struct.requestProcessList)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isDirectFlightOnly != null) {
        if (struct.isSetIsDirectFlightOnly()) {
          oprot.writeFieldBegin(IS_DIRECT_FLIGHT_ONLY_FIELD_DESC);
          oprot.writeString(struct.isDirectFlightOnly);
          oprot.writeFieldEnd();
        }
      }
      if (struct.permittedCarriers != null) {
        if (struct.isSetPermittedCarriers()) {
          oprot.writeFieldBegin(PERMITTED_CARRIERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.permittedCarriers.size()));
            for (String _iter14 : struct.permittedCarriers)
            {
              oprot.writeString(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.prohibitedCarriers != null) {
        if (struct.isSetProhibitedCarriers()) {
          oprot.writeFieldBegin(PROHIBITED_CARRIERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.prohibitedCarriers.size()));
            for (String _iter15 : struct.prohibitedCarriers)
            {
              oprot.writeString(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxReturnRouteNum()) {
        oprot.writeFieldBegin(MAX_RETURN_ROUTE_NUM_FIELD_DESC);
        oprot.writeI32(struct.maxReturnRouteNum);
        oprot.writeFieldEnd();
      }
      if (struct.chargeAmt != null) {
        if (struct.isSetChargeAmt()) {
          oprot.writeFieldBegin(CHARGE_AMT_FIELD_DESC);
          oprot.writeString(struct.chargeAmt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chargeBy != null) {
        if (struct.isSetChargeBy()) {
          oprot.writeFieldBegin(CHARGE_BY_FIELD_DESC);
          oprot.writeString(struct.chargeBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceMarkUpBy != null) {
        if (struct.isSetSourceMarkUpBy()) {
          oprot.writeFieldBegin(SOURCE_MARK_UP_BY_FIELD_DESC);
          oprot.writeString(struct.sourceMarkUpBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.SourceMarkUpAmt != null) {
        if (struct.isSetSourceMarkUpAmt()) {
          oprot.writeFieldBegin(SOURCE_MARK_UP_AMT_FIELD_DESC);
          oprot.writeString(struct.SourceMarkUpAmt);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GalileoShoppingRequestTupleSchemeFactory implements SchemeFactory {
    public GalileoShoppingRequestTupleScheme getScheme() {
      return new GalileoShoppingRequestTupleScheme();
    }
  }

  private static class GalileoShoppingRequestTupleScheme extends TupleScheme<GalileoShoppingRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GalileoShoppingRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.tripType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetCabinType()) {
        optionals.set(0);
      }
      if (struct.isSetPassengerTypeSet()) {
        optionals.set(1);
      }
      if (struct.isSetRequestProcessList()) {
        optionals.set(2);
      }
      if (struct.isSetIsDirectFlightOnly()) {
        optionals.set(3);
      }
      if (struct.isSetPermittedCarriers()) {
        optionals.set(4);
      }
      if (struct.isSetProhibitedCarriers()) {
        optionals.set(5);
      }
      if (struct.isSetMaxReturnRouteNum()) {
        optionals.set(6);
      }
      if (struct.isSetChargeAmt()) {
        optionals.set(7);
      }
      if (struct.isSetChargeBy()) {
        optionals.set(8);
      }
      if (struct.isSetSource()) {
        optionals.set(9);
      }
      if (struct.isSetSourceMarkUpBy()) {
        optionals.set(10);
      }
      if (struct.isSetSourceMarkUpAmt()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetCabinType()) {
        oprot.writeI32(struct.cabinType.getValue());
      }
      if (struct.isSetPassengerTypeSet()) {
        {
          oprot.writeI32(struct.passengerTypeSet.size());
          for (com.travelzen.fare.galileo.shopping.common.GalileoPassengerType _iter16 : struct.passengerTypeSet)
          {
            oprot.writeI32(_iter16.getValue());
          }
        }
      }
      if (struct.isSetRequestProcessList()) {
        {
          oprot.writeI32(struct.requestProcessList.size());
          for (GalileoShoppingRequestProcess _iter17 : struct.requestProcessList)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetIsDirectFlightOnly()) {
        oprot.writeString(struct.isDirectFlightOnly);
      }
      if (struct.isSetPermittedCarriers()) {
        {
          oprot.writeI32(struct.permittedCarriers.size());
          for (String _iter18 : struct.permittedCarriers)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetProhibitedCarriers()) {
        {
          oprot.writeI32(struct.prohibitedCarriers.size());
          for (String _iter19 : struct.prohibitedCarriers)
          {
            oprot.writeString(_iter19);
          }
        }
      }
      if (struct.isSetMaxReturnRouteNum()) {
        oprot.writeI32(struct.maxReturnRouteNum);
      }
      if (struct.isSetChargeAmt()) {
        oprot.writeString(struct.chargeAmt);
      }
      if (struct.isSetChargeBy()) {
        oprot.writeString(struct.chargeBy);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetSourceMarkUpBy()) {
        oprot.writeString(struct.sourceMarkUpBy);
      }
      if (struct.isSetSourceMarkUpAmt()) {
        oprot.writeString(struct.SourceMarkUpAmt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GalileoShoppingRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tripType = com.travelzen.fare.galileo.shopping.common.GalileoTripType.findByValue(iprot.readI32());
      struct.setTripTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.cabinType = com.travelzen.fare.galileo.shopping.common.GalileoCabinType.findByValue(iprot.readI32());
        struct.setCabinTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.passengerTypeSet = new HashSet<com.travelzen.fare.galileo.shopping.common.GalileoPassengerType>(2*_set20.size);
          for (int _i21 = 0; _i21 < _set20.size; ++_i21)
          {
            com.travelzen.fare.galileo.shopping.common.GalileoPassengerType _elem22; // required
            _elem22 = com.travelzen.fare.galileo.shopping.common.GalileoPassengerType.findByValue(iprot.readI32());
            struct.passengerTypeSet.add(_elem22);
          }
        }
        struct.setPassengerTypeSetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.requestProcessList = new ArrayList<GalileoShoppingRequestProcess>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            GalileoShoppingRequestProcess _elem25; // required
            _elem25 = new GalileoShoppingRequestProcess();
            _elem25.read(iprot);
            struct.requestProcessList.add(_elem25);
          }
        }
        struct.setRequestProcessListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isDirectFlightOnly = iprot.readString();
        struct.setIsDirectFlightOnlyIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.permittedCarriers = new ArrayList<String>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            String _elem28; // required
            _elem28 = iprot.readString();
            struct.permittedCarriers.add(_elem28);
          }
        }
        struct.setPermittedCarriersIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.prohibitedCarriers = new ArrayList<String>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            String _elem31; // required
            _elem31 = iprot.readString();
            struct.prohibitedCarriers.add(_elem31);
          }
        }
        struct.setProhibitedCarriersIsSet(true);
      }
      if (incoming.get(6)) {
        struct.maxReturnRouteNum = iprot.readI32();
        struct.setMaxReturnRouteNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.chargeAmt = iprot.readString();
        struct.setChargeAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.chargeBy = iprot.readString();
        struct.setChargeByIsSet(true);
      }
      if (incoming.get(9)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sourceMarkUpBy = iprot.readString();
        struct.setSourceMarkUpByIsSet(true);
      }
      if (incoming.get(11)) {
        struct.SourceMarkUpAmt = iprot.readString();
        struct.setSourceMarkUpAmtIsSet(true);
      }
    }
  }

}

